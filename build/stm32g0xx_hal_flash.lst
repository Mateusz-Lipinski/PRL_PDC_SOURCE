ARM GAS  /tmp/ccbAQPLA.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32g0xx_hal_flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	FLASH_Program_DoubleWord:
  23              	.LFB185:
  24              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c"
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @file    stm32g0xx_hal_flash.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *           + Program operations functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *           + Memory Control functions
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  @verbatim
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   ==============================================================================
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   ==============================================================================
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        prefetch and cache lines.
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   [..] The FLASH main features are:
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Flash memory read operations
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Read / write protections
  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Option bytes programming
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Prefetch on I-Code
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) 32 cache lines of 4*64 bits on I-Code
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 72-bits word
  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****           (8 bits added per double word)
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                         ##### How to use this driver #####
ARM GAS  /tmp/ccbAQPLA.s 			page 2


  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ==============================================================================
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     [..]
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       memory of all STM32G0xx devices.
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (#) Flash Memory IO Programming functions:
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Program functions: double word and fast program (full row programming)
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) There are two modes of programming:
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (#) Interrupts and flags management functions:
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Get error flag status by calling HAL_GetError()
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       (#) Option bytes management functions :
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_OB_Launch() function.
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 In this case, a reset is generated
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     [..]
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       to handle the following operations:
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Set the latency
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Enable/Disable the Instruction cache
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Reset the Instruction cache
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Enable/Disable the Flash power-down during low-power run and sleep modes
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Enable/Disable the Flash interrupts
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****        (+) Monitor the Flash flags status
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  @endverbatim
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   ******************************************************************************
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @attention
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * All rights reserved.</center></h2>
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   ******************************************************************************
  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** #include "stm32g0xx_hal.h"
  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @addtogroup STM32G0xx_HAL_Driver
  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
ARM GAS  /tmp/ccbAQPLA.s 			page 3


  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH FLASH
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief FLASH HAL module driver
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private defines -----------------------------------------------------------*/
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private macros ------------------------------------------------------------*/
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  * @{
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  */
 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Variable used for Program/Erase sectors under interruption
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash  = {.Lock = HAL_UNLOCKED, \
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                 .ErrorCode = HAL_FLASH_ERROR_NONE, \
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                 .ProcedureOnGoing = FLASH_TYPENONE, \
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                 .Address = 0U, \
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                 .Page = 0U, \
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                 .NbPagesToErase = 0U
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                                };
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  * @{
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  */
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** static void          FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** static void          FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress);
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *  @brief   Programming operation functions
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @verbatim
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                   ##### Programming operation functions #####
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     [..]
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     program operations.
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @endverbatim
ARM GAS  /tmp/ccbAQPLA.s 			page 4


 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address.
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                      This parameter can be a value of @ref FLASH_Type_Program
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *               This parameter is the data for the double word program and the address where
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *               are stored the data for the row fast program.
 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status;
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Check the parameters */
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Process Locked */
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Reset error code */
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Wait for last operation to be completed */
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (status == HAL_OK)
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Check the parameters */
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     else
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Check the parameters */
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Fast program a 32 row double-word (64-bit) at a specified address */
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Wait for last operation to be completed */
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* If the program operation is completed, disable the PG or FSTPG Bit */
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, TypeProgram);
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
ARM GAS  /tmp/ccbAQPLA.s 			page 5


 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Process Unlocked */
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* return status */
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address with interrupt enab
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                      This parameter can be a value of @ref FLASH_Type_Program
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *               This parameter is the data for the double word program and the address where
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *               are stored the data for the row fast program.
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status;
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Check the parameters */
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Process Locked */
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Reset error code */
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Wait for last operation to be completed */
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (status != HAL_OK)
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Process Unlocked */
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   else
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Set internal variables used by the IRQ handler */
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.ProcedureOnGoing = TypeProgram;
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.Address = Address;
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Enable End of Operation and Error interrupts */
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR | FLASH_IT_ECCC);
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Check the parameters */
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
ARM GAS  /tmp/ccbAQPLA.s 			page 6


 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     else
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Check the parameters */
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Fast program a 32 row double-word (64-bit) at a specified address */
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* return status */
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief Handle FLASH interrupt request.
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval None
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t error;
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Save flash errors. Only ECC detection can be checked here as ECCC
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      generates NMI */
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   error |= (FLASH->ECCR & FLASH_FLAG_ECCC);
 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* A] Set parameter for user or error callbacks */
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* check operation was a program or erase */
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* return adress being programmed */
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     param = pFlash.Address;
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_MASS | FLASH_TYPEERASE_PAGES)) != 0x00U)
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* return page number being erased (0 for mass erase) */
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     param = pFlash.Page;
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   else
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Nothing to do */
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* B] Check errors */
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (error != 0x00U)
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /*Save the error code*/
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.ErrorCode |= error;
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* clear error flags */
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /*Stop the procedure ongoing*/
ARM GAS  /tmp/ccbAQPLA.s 			page 7


 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Error callback */
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(param);
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* C] Check FLASH End of Operation flag */
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0x00U)
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Nb of pages to erased can be decreased */
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       pFlash.NbPagesToErase--;
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /* Check if there are still pages to erase*/
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       if (pFlash.NbPagesToErase != 0x00U)
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       {
 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         /* Increment page number */
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         pFlash.Page++;
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       }
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       else
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       {
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         /* No more pages to erase: stop erase pages procedure */
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       }
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     else
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       /*Stop the ongoing procedure */
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* User callback */
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     HAL_FLASH_EndOfOperationCallback(param);
 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Disable End of Operation and Error interrupts */
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR | FLASH_IT_ECCC);
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Process Unlocked */
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback.
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                  Mass Erase: 0
 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                  Page Erase: Page which has been erased
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                  Program: Address which was selected for data program
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval None
ARM GAS  /tmp/ccbAQPLA.s 			page 8


 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   UNUSED(ReturnValue);
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****    */
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback.
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                 Mass Erase: 0
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                 Page Erase: Page number which returned an error
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *                 Program: Address which was selected for data program
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval None
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   UNUSED(ReturnValue);
 400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****    */
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *  @brief   Management functions
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @verbatim
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     [..]
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     memory operations.
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @endverbatim
 422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
 423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access.
 427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
ARM GAS  /tmp/ccbAQPLA.s 			page 9


 434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* verify Flash is unlock */
 440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       status = HAL_ERROR;
 443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
 447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Lock the FLASH control register access.
 451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* verify Flash is locked */
 461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     status = HAL_OK;
 464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
 467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Bytes Registers access.
 471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /* verify option bytes are unlocked */
 484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       status = HAL_OK;
 487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
ARM GAS  /tmp/ccbAQPLA.s 			page 10


 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Lock the FLASH Option Bytes Registers access.
 495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* verify option bytes are locked */
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     status = HAL_OK;
 508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return status;
 511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL Status
 516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* We should not reach here : Option byte launch generates Option byte reset
 523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      so return error */
 524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return HAL_ERROR;
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  *
 534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @verbatim
 535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****  ===============================================================================
 538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     [..]
 539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** @endverbatim
 542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
 543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval FLASH_ErrorCode The returned value can be
ARM GAS  /tmp/ccbAQPLA.s 			page 11


 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_NONE No error set
 549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OP FLASH Operation error
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PROG FLASH Programming error
 551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_WRP FLASH Write protection error
 552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGA FLASH Programming alignment error
 553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_SIZ FLASH Size error
 554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGS FLASH Programming sequence error
 555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_MIS FLASH Fast programming data miss error
 556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_FAST FLASH Fast programming error
 557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_RD FLASH Read Protection error (PCROP)(*)
 558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OPTV FLASH Option validity error
 559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_ECCD FLASH two ECC errors have been detected
 560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @note (*) availability depends on devices
 561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return pFlash.ErrorCode;
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @}
 573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @{
 579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
 584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t error;
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t eccerr;
 590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      flag will be set */
 593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t timeout = HAL_GetTick() + Timeout;
 594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Wait if any operation is ongoing */
 596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (HAL_GetTick() >= timeout)
 599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       return HAL_TIMEOUT;
 601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* check flash errors. Only ECC correction can be checked here as ECCD
ARM GAS  /tmp/ccbAQPLA.s 			page 12


 605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       generates NMI */
 606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Clear SR register */
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   FLASH->SR = FLASH_FLAG_SR_CLEAR;
 610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Update error with ECC error value */
 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if(eccerr != 0x00u)
 615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     FLASH->ECCR |= eccerr;
 617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     error |= eccerr;
 618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   if (error != 0x00U)
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     /*Save the error code*/
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.ErrorCode = error;
 624:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     return HAL_ERROR;
 626:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 627:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Wait for control register to be written */
 629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   timeout = HAL_GetTick() + Timeout;
 630:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 632:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     if (HAL_GetTick() >= timeout)
 634:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       return HAL_TIMEOUT;
 636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 637:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 638:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return HAL_OK;
 640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Program double-word (64-bit) at a specified address.
 644:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Data Specifies the data to be programmed.
 646:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval None
 647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
  25              		.loc 1 649 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
 650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set PG bit */
ARM GAS  /tmp/ccbAQPLA.s 			page 13


 651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_PG);
  36              		.loc 1 651 0
  37 0002 054C     		ldr	r4, .L2
  38 0004 6169     		ldr	r1, [r4, #20]
  39 0006 0125     		movs	r5, #1
  40 0008 2943     		orrs	r1, r5
  41 000a 6161     		str	r1, [r4, #20]
 652:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 653:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Program first word */
 654:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *(uint32_t *)Address = (uint32_t)Data;
  42              		.loc 1 654 0
  43 000c 0260     		str	r2, [r0]
  44              	.LBB10:
  45              	.LBB11:
  46              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccbAQPLA.s 			page 14


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccbAQPLA.s 			page 15


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccbAQPLA.s 			page 16


 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccbAQPLA.s 			page 17


 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccbAQPLA.s 			page 18


 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
ARM GAS  /tmp/ccbAQPLA.s 			page 19


 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccbAQPLA.s 			page 20


 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
ARM GAS  /tmp/ccbAQPLA.s 			page 21


 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccbAQPLA.s 			page 22


 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
ARM GAS  /tmp/ccbAQPLA.s 			page 23


 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
ARM GAS  /tmp/ccbAQPLA.s 			page 24


 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccbAQPLA.s 			page 25


 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccbAQPLA.s 			page 26


 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccbAQPLA.s 			page 27


 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /tmp/ccbAQPLA.s 			page 28


 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  47              		.loc 2 868 0
  48              		.syntax divided
  49              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  50 000e BFF36F8F 		isb 0xF
  51              	@ 0 "" 2
  52              		.thumb
  53              		.syntax unified
  54              	.LBE11:
  55              	.LBE10:
 655:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 656:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     (independently of compiler optimization behavior) */
 658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __ISB();
 659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 660:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Program second word */
 661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
  56              		.loc 1 661 0
  57 0012 4360     		str	r3, [r0, #4]
 662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
  58              		.loc 1 662 0
  59              		@ sp needed
  60 0014 30BD     		pop	{r4, r5, pc}
  61              	.L3:
  62 0016 C046     		.align	2
  63              	.L2:
  64 0018 00200240 		.word	1073881088
  65              		.cfi_endproc
  66              	.LFE185:
  68              		.section	.RamFunc,"ax",%progbits
ARM GAS  /tmp/ccbAQPLA.s 			page 29


  69              		.align	1
  70              		.syntax unified
  71              		.code	16
  72              		.thumb_func
  73              		.fpu softvfp
  75              	FLASH_Program_Fast:
  76              	.LFB186:
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** /**
 665:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @brief  Fast program a 32 row double-word (64-bit) at a specified address.
 666:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @param  DataAddress Specifies the address where the data are stored.
 668:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   * @retval None
 669:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   */
 670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 671:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** {
  77              		.loc 1 671 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL1:
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  87              	.LVL2:
 672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint8_t index = 0;
 673:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t dest = Address;
 674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t src = DataAddress;
 675:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t primask_bit;
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set FSTPG bit */
 678:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
  88              		.loc 1 678 0
  89 0002 0C4A     		ldr	r2, .L8
  90 0004 5469     		ldr	r4, [r2, #20]
  91 0006 8023     		movs	r3, #128
  92 0008 DB02     		lsls	r3, r3, #11
  93 000a 2343     		orrs	r3, r4
  94 000c 5361     		str	r3, [r2, #20]
  95              	.LBB12:
  96              	.LBB13:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  97              		.loc 2 386 0
  98              		.syntax divided
  99              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 100 000e EFF31084 		MRS r4, primask
 101              	@ 0 "" 2
 102              		.thumb
 103              		.syntax unified
 104              	.LBE13:
 105              	.LBE12:
 106              	.LBB14:
 107              	.LBB15:
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 108              		.loc 2 142 0
ARM GAS  /tmp/ccbAQPLA.s 			page 30


 109              		.syntax divided
 110              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 111 0012 72B6     		cpsid i
 112              	@ 0 "" 2
 113              		.thumb
 114              		.syntax unified
 115              	.LBE15:
 116              	.LBE14:
 672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint8_t index = 0;
 117              		.loc 1 672 0
 118 0014 0023     		movs	r3, #0
 119 0016 03E0     		b	.L5
 120              	.LVL3:
 121              	.L6:
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Enter critical section: row programming should not be longer than 7 ms */
 681:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   primask_bit = __get_PRIMASK();
 682:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __disable_irq();
 683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Fast Program : 64 words */
 685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   while (index < 64U)
 686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 687:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     *(uint32_t *)dest = *(uint32_t *)src;
 122              		.loc 1 687 0
 123 0018 04C9     		ldmia	r1!, {r2}
 124              	.LVL4:
 125 001a 04C0     		stmia	r0!, {r2}
 126              	.LVL5:
 688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     src += 4U;
 689:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     dest += 4U;
 690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     index++;
 127              		.loc 1 690 0
 128 001c 0133     		adds	r3, r3, #1
 129              	.LVL6:
 130 001e DBB2     		uxtb	r3, r3
 131              	.LVL7:
 132              	.L5:
 685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 133              		.loc 1 685 0
 134 0020 3F2B     		cmp	r3, #63
 135 0022 F9D9     		bls	.L6
 136              	.LVL8:
 137              	.L7:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* wait for BSY1 in order to be sure that flash operation is ended befoire
 694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      allowing prefetch in flash. Timeout does not return status, as it will
 695:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****      be anyway done later */
 696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
 138              		.loc 1 696 0 discriminator 1
 139 0024 034B     		ldr	r3, .L8
 140 0026 1B69     		ldr	r3, [r3, #16]
 141 0028 DB03     		lsls	r3, r3, #15
 142 002a FBD4     		bmi	.L7
 143              	.LVL9:
 144              	.LBB16:
 145              	.LBB17:
ARM GAS  /tmp/ccbAQPLA.s 			page 31


 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 146              		.loc 2 414 0
 147              		.syntax divided
 148              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 149 002c 84F31088 		MSR primask, r4
 150              	@ 0 "" 2
 151              	.LVL10:
 152              		.thumb
 153              		.syntax unified
 154              	.LBE17:
 155              	.LBE16:
 697:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 698:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 700:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Exit critical section: restore previous priority mask */
 701:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   __set_PRIMASK(primask_bit);
 702:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 156              		.loc 1 702 0
 157              		@ sp needed
 158 0030 10BD     		pop	{r4, pc}
 159              	.L9:
 160 0032 C046     		.align	2
 161              	.L8:
 162 0034 00200240 		.word	1073881088
 163              		.cfi_endproc
 164              	.LFE186:
 166              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 167              		.align	1
 168              		.weak	HAL_FLASH_EndOfOperationCallback
 169              		.syntax unified
 170              		.code	16
 171              		.thumb_func
 172              		.fpu softvfp
 174              	HAL_FLASH_EndOfOperationCallback:
 175              	.LFB176:
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 176              		.loc 1 379 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL11:
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 182              		.loc 1 386 0
 183              		@ sp needed
 184 0000 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE176:
 188              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 189              		.align	1
 190              		.weak	HAL_FLASH_OperationErrorCallback
 191              		.syntax unified
 192              		.code	16
 193              		.thumb_func
 194              		.fpu softvfp
 196              	HAL_FLASH_OperationErrorCallback:
 197              	.LFB177:
ARM GAS  /tmp/ccbAQPLA.s 			page 32


 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 198              		.loc 1 397 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203              	.LVL12:
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 204              		.loc 1 404 0
 205              		@ sp needed
 206 0000 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE177:
 210              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 211              		.align	1
 212              		.global	HAL_FLASH_IRQHandler
 213              		.syntax unified
 214              		.code	16
 215              		.thumb_func
 216              		.fpu softvfp
 218              	HAL_FLASH_IRQHandler:
 219              	.LFB175:
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 220              		.loc 1 282 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 10B5     		push	{r4, lr}
 225              	.LCFI2:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 4, -8
 228              		.cfi_offset 14, -4
 229              	.LVL13:
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   error |= (FLASH->ECCR & FLASH_FLAG_ECCC);
 230              		.loc 1 288 0
 231 0002 334A     		ldr	r2, .L26
 232 0004 1369     		ldr	r3, [r2, #16]
 233 0006 3349     		ldr	r1, .L26+4
 234 0008 1940     		ands	r1, r3
 235              	.LVL14:
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 236              		.loc 1 289 0
 237 000a 9369     		ldr	r3, [r2, #24]
 238 000c 8020     		movs	r0, #128
 239 000e C005     		lsls	r0, r0, #23
 240 0010 0340     		ands	r3, r0
 241 0012 0B43     		orrs	r3, r1
 242              	.LVL15:
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 243              		.loc 1 291 0
 244 0014 5169     		ldr	r1, [r2, #20]
 245 0016 3048     		ldr	r0, .L26+8
 246 0018 8068     		ldr	r0, [r0, #8]
 247 001a 8143     		bics	r1, r0
 248 001c 5161     		str	r1, [r2, #20]
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 249              		.loc 1 295 0
ARM GAS  /tmp/ccbAQPLA.s 			page 33


 250 001e 2F4A     		ldr	r2, .L26+12
 251 0020 1042     		tst	r0, r2
 252 0022 3BD0     		beq	.L13
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 253              		.loc 1 298 0
 254 0024 2C4A     		ldr	r2, .L26+8
 255 0026 D468     		ldr	r4, [r2, #12]
 256              	.LVL16:
 257              	.L14:
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 258              		.loc 1 311 0
 259 0028 002B     		cmp	r3, #0
 260 002a 15D0     		beq	.L15
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 261              		.loc 1 314 0
 262 002c 2A49     		ldr	r1, .L26+8
 263 002e 4A68     		ldr	r2, [r1, #4]
 264 0030 1A43     		orrs	r2, r3
 265 0032 4A60     		str	r2, [r1, #4]
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 266              		.loc 1 317 0
 267 0034 9A0F     		lsrs	r2, r3, #30
 268 0036 9207     		lsls	r2, r2, #30
 269 0038 03D0     		beq	.L16
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 270              		.loc 1 317 0 is_stmt 0 discriminator 1
 271 003a 2549     		ldr	r1, .L26
 272 003c 8869     		ldr	r0, [r1, #24]
 273 003e 0243     		orrs	r2, r0
 274 0040 8A61     		str	r2, [r1, #24]
 275              	.L16:
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 276              		.loc 1 317 0 discriminator 3
 277 0042 9B00     		lsls	r3, r3, #2
 278              	.LVL17:
 279 0044 9B08     		lsrs	r3, r3, #2
 280 0046 01D0     		beq	.L17
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 281              		.loc 1 317 0 discriminator 4
 282 0048 214A     		ldr	r2, .L26
 283 004a 1361     		str	r3, [r2, #16]
 284              	.L17:
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 285              		.loc 1 320 0 is_stmt 1
 286 004c 224B     		ldr	r3, .L26+8
 287 004e 0022     		movs	r2, #0
 288 0050 9A60     		str	r2, [r3, #8]
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 289              		.loc 1 323 0
 290 0052 2000     		movs	r0, r4
 291 0054 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 292              	.LVL18:
 293              	.L15:
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 294              		.loc 1 327 0
 295 0058 1D4B     		ldr	r3, .L26
 296 005a 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccbAQPLA.s 			page 34


 297 005c DB07     		lsls	r3, r3, #31
 298 005e 0CD5     		bpl	.L18
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 299              		.loc 1 330 0 discriminator 4
 300 0060 1B4B     		ldr	r3, .L26
 301 0062 0122     		movs	r2, #1
 302 0064 1A61     		str	r2, [r3, #16]
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 303              		.loc 1 332 0 discriminator 4
 304 0066 1C4B     		ldr	r3, .L26+8
 305 0068 9B68     		ldr	r3, [r3, #8]
 306 006a 022B     		cmp	r3, #2
 307 006c 1FD0     		beq	.L24
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 308              		.loc 1 353 0
 309 006e 1A4B     		ldr	r3, .L26+8
 310 0070 0022     		movs	r2, #0
 311 0072 9A60     		str	r2, [r3, #8]
 312              	.L21:
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 313              		.loc 1 357 0
 314 0074 2000     		movs	r0, r4
 315 0076 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 316              	.LVL19:
 317              	.L18:
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 318              		.loc 1 360 0
 319 007a 174B     		ldr	r3, .L26+8
 320 007c 9B68     		ldr	r3, [r3, #8]
 321 007e 002B     		cmp	r3, #0
 322 0080 0BD1     		bne	.L12
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 323              		.loc 1 363 0 discriminator 1
 324 0082 134B     		ldr	r3, .L26
 325 0084 9A69     		ldr	r2, [r3, #24]
 326 0086 1649     		ldr	r1, .L26+16
 327 0088 0A40     		ands	r2, r1
 328 008a 9A61     		str	r2, [r3, #24]
 329 008c 5A69     		ldr	r2, [r3, #20]
 330 008e 1549     		ldr	r1, .L26+20
 331 0090 0A40     		ands	r2, r1
 332 0092 5A61     		str	r2, [r3, #20]
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 333              		.loc 1 366 0 discriminator 1
 334 0094 104B     		ldr	r3, .L26+8
 335 0096 0022     		movs	r2, #0
 336 0098 1A70     		strb	r2, [r3]
 337              	.L12:
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 338              		.loc 1 368 0
 339              		@ sp needed
 340              	.LVL20:
 341 009a 10BD     		pop	{r4, pc}
 342              	.LVL21:
 343              	.L13:
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 344              		.loc 1 300 0
ARM GAS  /tmp/ccbAQPLA.s 			page 35


 345 009c 0622     		movs	r2, #6
 346 009e 0242     		tst	r2, r0
 347 00a0 02D0     		beq	.L23
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 348              		.loc 1 303 0
 349 00a2 0D4A     		ldr	r2, .L26+8
 350 00a4 1469     		ldr	r4, [r2, #16]
 351              	.LVL22:
 352 00a6 BFE7     		b	.L14
 353              	.LVL23:
 354              	.L23:
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t error;
 355              		.loc 1 283 0
 356 00a8 0124     		movs	r4, #1
 357 00aa 6442     		rsbs	r4, r4, #0
 358 00ac BCE7     		b	.L14
 359              	.LVL24:
 360              	.L24:
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 361              		.loc 1 335 0
 362 00ae 0A4A     		ldr	r2, .L26+8
 363 00b0 5369     		ldr	r3, [r2, #20]
 364 00b2 013B     		subs	r3, r3, #1
 365 00b4 5361     		str	r3, [r2, #20]
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       {
 366              		.loc 1 338 0
 367 00b6 002B     		cmp	r3, #0
 368 00b8 03D1     		bne	.L25
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       }
 369              		.loc 1 347 0
 370 00ba 074B     		ldr	r3, .L26+8
 371 00bc 0022     		movs	r2, #0
 372 00be 9A60     		str	r2, [r3, #8]
 373 00c0 D8E7     		b	.L21
 374              	.L25:
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 375              		.loc 1 341 0
 376 00c2 1300     		movs	r3, r2
 377 00c4 1269     		ldr	r2, [r2, #16]
 378 00c6 501C     		adds	r0, r2, #1
 379 00c8 1861     		str	r0, [r3, #16]
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****       }
 380              		.loc 1 342 0
 381 00ca FFF7FEFF 		bl	FLASH_PageErase
 382              	.LVL25:
 383 00ce D1E7     		b	.L21
 384              	.L27:
 385              		.align	2
 386              	.L26:
 387 00d0 00200240 		.word	1073881088
 388 00d4 FAC30000 		.word	50170
 389 00d8 00000000 		.word	.LANCHOR0
 390 00dc 01000400 		.word	262145
 391 00e0 FFFFFFFE 		.word	-16777217
 392 00e4 FFFFFFFC 		.word	-50331649
 393              		.cfi_endproc
 394              	.LFE175:
ARM GAS  /tmp/ccbAQPLA.s 			page 36


 396              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 397              		.align	1
 398              		.global	HAL_FLASH_Unlock
 399              		.syntax unified
 400              		.code	16
 401              		.thumb_func
 402              		.fpu softvfp
 404              	HAL_FLASH_Unlock:
 405              	.LFB178:
 430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 406              		.loc 1 430 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411              	.LVL26:
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 412              		.loc 1 433 0
 413 0000 084B     		ldr	r3, .L33
 414 0002 5B69     		ldr	r3, [r3, #20]
 415 0004 002B     		cmp	r3, #0
 416 0006 01DB     		blt	.L32
 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 417              		.loc 1 431 0
 418 0008 0020     		movs	r0, #0
 419              	.L29:
 420              	.LVL27:
 447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 421              		.loc 1 447 0
 422              		@ sp needed
 423 000a 7047     		bx	lr
 424              	.LVL28:
 425              	.L32:
 436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 426              		.loc 1 436 0
 427 000c 054B     		ldr	r3, .L33
 428 000e 064A     		ldr	r2, .L33+4
 429 0010 9A60     		str	r2, [r3, #8]
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 430              		.loc 1 437 0
 431 0012 064A     		ldr	r2, .L33+8
 432 0014 9A60     		str	r2, [r3, #8]
 440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 433              		.loc 1 440 0
 434 0016 5B69     		ldr	r3, [r3, #20]
 435 0018 002B     		cmp	r3, #0
 436 001a 01DB     		blt	.L31
 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 437              		.loc 1 431 0
 438 001c 0020     		movs	r0, #0
 439 001e F4E7     		b	.L29
 440              	.L31:
 442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 441              		.loc 1 442 0
 442 0020 0120     		movs	r0, #1
 443 0022 F2E7     		b	.L29
 444              	.L34:
ARM GAS  /tmp/ccbAQPLA.s 			page 37


 445              		.align	2
 446              	.L33:
 447 0024 00200240 		.word	1073881088
 448 0028 23016745 		.word	1164378403
 449 002c AB89EFCD 		.word	-839939669
 450              		.cfi_endproc
 451              	.LFE178:
 453              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 454              		.align	1
 455              		.global	HAL_FLASH_Lock
 456              		.syntax unified
 457              		.code	16
 458              		.thumb_func
 459              		.fpu softvfp
 461              	HAL_FLASH_Lock:
 462              	.LFB179:
 454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 463              		.loc 1 454 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL29:
 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 469              		.loc 1 458 0
 470 0000 064B     		ldr	r3, .L38
 471 0002 5969     		ldr	r1, [r3, #20]
 472 0004 8022     		movs	r2, #128
 473 0006 1206     		lsls	r2, r2, #24
 474 0008 0A43     		orrs	r2, r1
 475 000a 5A61     		str	r2, [r3, #20]
 461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 476              		.loc 1 461 0
 477 000c 5B69     		ldr	r3, [r3, #20]
 478 000e 002B     		cmp	r3, #0
 479 0010 01DB     		blt	.L37
 455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 480              		.loc 1 455 0
 481 0012 0120     		movs	r0, #1
 482              	.L36:
 483              	.LVL30:
 467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 484              		.loc 1 467 0
 485              		@ sp needed
 486 0014 7047     		bx	lr
 487              	.LVL31:
 488              	.L37:
 463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 489              		.loc 1 463 0
 490 0016 0020     		movs	r0, #0
 491 0018 FCE7     		b	.L36
 492              	.L39:
 493 001a C046     		.align	2
 494              	.L38:
 495 001c 00200240 		.word	1073881088
 496              		.cfi_endproc
 497              	.LFE179:
ARM GAS  /tmp/ccbAQPLA.s 			page 38


 499              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 500              		.align	1
 501              		.global	HAL_FLASH_OB_Unlock
 502              		.syntax unified
 503              		.code	16
 504              		.thumb_func
 505              		.fpu softvfp
 507              	HAL_FLASH_OB_Unlock:
 508              	.LFB180:
 474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 509              		.loc 1 474 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL32:
 477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 515              		.loc 1 477 0
 516 0000 084B     		ldr	r3, .L45
 517 0002 5B69     		ldr	r3, [r3, #20]
 518 0004 5B00     		lsls	r3, r3, #1
 519 0006 0BD5     		bpl	.L42
 480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 520              		.loc 1 480 0
 521 0008 064B     		ldr	r3, .L45
 522 000a 074A     		ldr	r2, .L45+4
 523 000c DA60     		str	r2, [r3, #12]
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 524              		.loc 1 481 0
 525 000e 074A     		ldr	r2, .L45+8
 526 0010 DA60     		str	r2, [r3, #12]
 484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 527              		.loc 1 484 0
 528 0012 5B69     		ldr	r3, [r3, #20]
 529 0014 5B00     		lsls	r3, r3, #1
 530 0016 01D4     		bmi	.L44
 486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 531              		.loc 1 486 0
 532 0018 0020     		movs	r0, #0
 533 001a 02E0     		b	.L41
 534              	.L44:
 475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 535              		.loc 1 475 0
 536 001c 0120     		movs	r0, #1
 537 001e 00E0     		b	.L41
 538              	.L42:
 539 0020 0120     		movs	r0, #1
 540              	.L41:
 541              	.LVL33:
 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 542              		.loc 1 491 0
 543              		@ sp needed
 544 0022 7047     		bx	lr
 545              	.L46:
 546              		.align	2
 547              	.L45:
 548 0024 00200240 		.word	1073881088
ARM GAS  /tmp/ccbAQPLA.s 			page 39


 549 0028 3B2A1908 		.word	135866939
 550 002c 7F6E5D4C 		.word	1281191551
 551              		.cfi_endproc
 552              	.LFE180:
 554              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 555              		.align	1
 556              		.global	HAL_FLASH_OB_Lock
 557              		.syntax unified
 558              		.code	16
 559              		.thumb_func
 560              		.fpu softvfp
 562              	HAL_FLASH_OB_Lock:
 563              	.LFB181:
 498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 564              		.loc 1 498 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL34:
 502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 570              		.loc 1 502 0
 571 0000 064B     		ldr	r3, .L51
 572 0002 5A69     		ldr	r2, [r3, #20]
 573 0004 8021     		movs	r1, #128
 574 0006 C905     		lsls	r1, r1, #23
 575 0008 0A43     		orrs	r2, r1
 576 000a 5A61     		str	r2, [r3, #20]
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 577              		.loc 1 505 0
 578 000c 5B69     		ldr	r3, [r3, #20]
 579 000e 0B42     		tst	r3, r1
 580 0010 01D0     		beq	.L50
 507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 581              		.loc 1 507 0
 582 0012 0020     		movs	r0, #0
 583              	.L48:
 584              	.LVL35:
 511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 585              		.loc 1 511 0
 586              		@ sp needed
 587 0014 7047     		bx	lr
 588              	.LVL36:
 589              	.L50:
 499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 590              		.loc 1 499 0
 591 0016 0120     		movs	r0, #1
 592 0018 FCE7     		b	.L48
 593              	.L52:
 594 001a C046     		.align	2
 595              	.L51:
 596 001c 00200240 		.word	1073881088
 597              		.cfi_endproc
 598              	.LFE181:
 600              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 601              		.align	1
 602              		.global	HAL_FLASH_OB_Launch
ARM GAS  /tmp/ccbAQPLA.s 			page 40


 603              		.syntax unified
 604              		.code	16
 605              		.thumb_func
 606              		.fpu softvfp
 608              	HAL_FLASH_OB_Launch:
 609              	.LFB182:
 518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 610              		.loc 1 518 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 615              		.loc 1 520 0
 616 0000 034A     		ldr	r2, .L54
 617 0002 5169     		ldr	r1, [r2, #20]
 618 0004 8023     		movs	r3, #128
 619 0006 1B05     		lsls	r3, r3, #20
 620 0008 0B43     		orrs	r3, r1
 621 000a 5361     		str	r3, [r2, #20]
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 622              		.loc 1 525 0
 623 000c 0120     		movs	r0, #1
 624              		@ sp needed
 625 000e 7047     		bx	lr
 626              	.L55:
 627              		.align	2
 628              	.L54:
 629 0010 00200240 		.word	1073881088
 630              		.cfi_endproc
 631              	.LFE182:
 633              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 634              		.align	1
 635              		.global	HAL_FLASH_GetError
 636              		.syntax unified
 637              		.code	16
 638              		.thumb_func
 639              		.fpu softvfp
 641              	HAL_FLASH_GetError:
 642              	.LFB183:
 563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   return pFlash.ErrorCode;
 643              		.loc 1 563 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              		@ link register save eliminated.
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 648              		.loc 1 564 0
 649 0000 014B     		ldr	r3, .L57
 650 0002 5868     		ldr	r0, [r3, #4]
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 651              		.loc 1 565 0
 652              		@ sp needed
 653 0004 7047     		bx	lr
 654              	.L58:
 655 0006 C046     		.align	2
 656              	.L57:
ARM GAS  /tmp/ccbAQPLA.s 			page 41


 657 0008 00000000 		.word	.LANCHOR0
 658              		.cfi_endproc
 659              	.LFE183:
 661              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 662              		.align	1
 663              		.global	FLASH_WaitForLastOperation
 664              		.syntax unified
 665              		.code	16
 666              		.thumb_func
 667              		.fpu softvfp
 669              	FLASH_WaitForLastOperation:
 670              	.LFB184:
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   uint32_t error;
 671              		.loc 1 587 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              	.LVL37:
 676 0000 70B5     		push	{r4, r5, r6, lr}
 677              	.LCFI3:
 678              		.cfi_def_cfa_offset 16
 679              		.cfi_offset 4, -16
 680              		.cfi_offset 5, -12
 681              		.cfi_offset 6, -8
 682              		.cfi_offset 14, -4
 683 0002 0500     		movs	r5, r0
 593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 684              		.loc 1 593 0
 685 0004 FFF7FEFF 		bl	HAL_GetTick
 686              	.LVL38:
 687 0008 4419     		adds	r4, r0, r5
 688              	.LVL39:
 689              	.L60:
 596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 690              		.loc 1 596 0
 691 000a 174B     		ldr	r3, .L71
 692 000c 1B69     		ldr	r3, [r3, #16]
 693 000e DB03     		lsls	r3, r3, #15
 694 0010 05D5     		bpl	.L69
 598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 695              		.loc 1 598 0
 696 0012 FFF7FEFF 		bl	HAL_GetTick
 697              	.LVL40:
 698 0016 A042     		cmp	r0, r4
 699 0018 F7D3     		bcc	.L60
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 700              		.loc 1 600 0
 701 001a 0320     		movs	r0, #3
 702              	.LVL41:
 703              	.L61:
 640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 704              		.loc 1 640 0
 705              		@ sp needed
 706 001c 70BD     		pop	{r4, r5, r6, pc}
 707              	.LVL42:
 708              	.L69:
 606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
ARM GAS  /tmp/ccbAQPLA.s 			page 42


 709              		.loc 1 606 0
 710 001e 124A     		ldr	r2, .L71
 711 0020 1369     		ldr	r3, [r2, #16]
 712 0022 1249     		ldr	r1, .L71+4
 713 0024 0B40     		ands	r3, r1
 714              	.LVL43:
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 715              		.loc 1 609 0
 716 0026 1249     		ldr	r1, .L71+8
 717 0028 1161     		str	r1, [r2, #16]
 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 718              		.loc 1 612 0
 719 002a 9269     		ldr	r2, [r2, #24]
 720 002c 8021     		movs	r1, #128
 721 002e C905     		lsls	r1, r1, #23
 722 0030 0A40     		ands	r2, r1
 723              	.LVL44:
 614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 724              		.loc 1 614 0
 725 0032 04D0     		beq	.L63
 616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     error |= eccerr;
 726              		.loc 1 616 0
 727 0034 0C48     		ldr	r0, .L71
 728 0036 8169     		ldr	r1, [r0, #24]
 729 0038 1143     		orrs	r1, r2
 730 003a 8161     		str	r1, [r0, #24]
 617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 731              		.loc 1 617 0
 732 003c 1343     		orrs	r3, r2
 733              	.LVL45:
 734              	.L63:
 620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 735              		.loc 1 620 0
 736 003e 002B     		cmp	r3, #0
 737 0040 03D0     		beq	.L64
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 738              		.loc 1 623 0
 739 0042 0C4A     		ldr	r2, .L71+12
 740              	.LVL46:
 741 0044 5360     		str	r3, [r2, #4]
 625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 742              		.loc 1 625 0
 743 0046 0120     		movs	r0, #1
 744 0048 E8E7     		b	.L61
 745              	.LVL47:
 746              	.L64:
 629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 747              		.loc 1 629 0
 748 004a FFF7FEFF 		bl	HAL_GetTick
 749              	.LVL48:
 750 004e 4519     		adds	r5, r0, r5
 751              	.LVL49:
 752              	.L65:
 631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 753              		.loc 1 631 0
 754 0050 054B     		ldr	r3, .L71
 755 0052 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccbAQPLA.s 			page 43


 756 0054 5B03     		lsls	r3, r3, #13
 757 0056 05D5     		bpl	.L70
 633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 758              		.loc 1 633 0
 759 0058 FFF7FEFF 		bl	HAL_GetTick
 760              	.LVL50:
 761 005c A842     		cmp	r0, r5
 762 005e F7D3     		bcc	.L65
 635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 763              		.loc 1 635 0
 764 0060 0320     		movs	r0, #3
 765 0062 DBE7     		b	.L61
 766              	.L70:
 639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** }
 767              		.loc 1 639 0
 768 0064 0020     		movs	r0, #0
 769 0066 D9E7     		b	.L61
 770              	.L72:
 771              		.align	2
 772              	.L71:
 773 0068 00200240 		.word	1073881088
 774 006c FAC30000 		.word	50170
 775 0070 FBC30000 		.word	50171
 776 0074 00000000 		.word	.LANCHOR0
 777              		.cfi_endproc
 778              	.LFE184:
 780              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 781              		.align	1
 782              		.global	HAL_FLASH_Program
 783              		.syntax unified
 784              		.code	16
 785              		.thumb_func
 786              		.fpu softvfp
 788              	HAL_FLASH_Program:
 789              	.LFB173:
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status;
 790              		.loc 1 164 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 0
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              	.LVL51:
 795 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 796              	.LCFI4:
 797              		.cfi_def_cfa_offset 24
 798              		.cfi_offset 3, -24
 799              		.cfi_offset 4, -20
 800              		.cfi_offset 5, -16
 801              		.cfi_offset 6, -12
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 0400     		movs	r4, r0
 805 0004 0D00     		movs	r5, r1
 806 0006 1600     		movs	r6, r2
 807 0008 1F00     		movs	r7, r3
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 808              		.loc 1 172 0
 809 000a 144B     		ldr	r3, .L80
ARM GAS  /tmp/ccbAQPLA.s 			page 44


 810 000c 1B78     		ldrb	r3, [r3]
 811 000e 012B     		cmp	r3, #1
 812 0010 22D0     		beq	.L78
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 813              		.loc 1 172 0 is_stmt 0 discriminator 2
 814 0012 124B     		ldr	r3, .L80
 815 0014 0122     		movs	r2, #1
 816              	.LVL52:
 817 0016 1A70     		strb	r2, [r3]
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 818              		.loc 1 175 0 is_stmt 1 discriminator 2
 819 0018 0022     		movs	r2, #0
 820 001a 5A60     		str	r2, [r3, #4]
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 821              		.loc 1 178 0 discriminator 2
 822 001c FA20     		movs	r0, #250
 823              	.LVL53:
 824 001e 8000     		lsls	r0, r0, #2
 825 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 826              	.LVL54:
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 827              		.loc 1 180 0 discriminator 2
 828 0024 0028     		cmp	r0, #0
 829 0026 0DD1     		bne	.L75
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 830              		.loc 1 182 0
 831 0028 012C     		cmp	r4, #1
 832 002a 0FD0     		beq	.L79
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 833              		.loc 1 196 0
 834 002c 3100     		movs	r1, r6
 835 002e 2800     		movs	r0, r5
 836              	.LVL55:
 837 0030 FFF7FEFF 		bl	FLASH_Program_Fast
 838              	.LVL56:
 839              	.L77:
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 840              		.loc 1 200 0
 841 0034 FA20     		movs	r0, #250
 842 0036 8000     		lsls	r0, r0, #2
 843 0038 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 844              	.LVL57:
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 845              		.loc 1 203 0
 846 003c 084A     		ldr	r2, .L80+4
 847 003e 5369     		ldr	r3, [r2, #20]
 848 0040 A343     		bics	r3, r4
 849 0042 5361     		str	r3, [r2, #20]
 850              	.LVL58:
 851              	.L75:
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 852              		.loc 1 207 0
 853 0044 054B     		ldr	r3, .L80
 854 0046 0022     		movs	r2, #0
 855 0048 1A70     		strb	r2, [r3]
 856              	.LVL59:
 857              	.L74:
ARM GAS  /tmp/ccbAQPLA.s 			page 45


 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 858              		.loc 1 211 0
 859              		@ sp needed
 860              	.LVL60:
 861              	.LVL61:
 862 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 863              	.LVL62:
 864              	.L79:
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 865              		.loc 1 188 0
 866 004c 3200     		movs	r2, r6
 867 004e 3B00     		movs	r3, r7
 868 0050 2800     		movs	r0, r5
 869              	.LVL63:
 870 0052 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 871              	.LVL64:
 872 0056 EDE7     		b	.L77
 873              	.LVL65:
 874              	.L78:
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 875              		.loc 1 172 0
 876 0058 0220     		movs	r0, #2
 877              	.LVL66:
 878 005a F6E7     		b	.L74
 879              	.L81:
 880              		.align	2
 881              	.L80:
 882 005c 00000000 		.word	.LANCHOR0
 883 0060 00200240 		.word	1073881088
 884              		.cfi_endproc
 885              	.LFE173:
 887              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 888              		.align	1
 889              		.global	HAL_FLASH_Program_IT
 890              		.syntax unified
 891              		.code	16
 892              		.thumb_func
 893              		.fpu softvfp
 895              	HAL_FLASH_Program_IT:
 896              	.LFB174:
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   HAL_StatusTypeDef status;
 897              		.loc 1 225 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 8
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              	.LVL67:
 902 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 903              	.LCFI5:
 904              		.cfi_def_cfa_offset 20
 905              		.cfi_offset 4, -20
 906              		.cfi_offset 5, -16
 907              		.cfi_offset 6, -12
 908              		.cfi_offset 7, -8
 909              		.cfi_offset 14, -4
 910 0002 83B0     		sub	sp, sp, #12
 911              	.LCFI6:
 912              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccbAQPLA.s 			page 46


 913 0004 0600     		movs	r6, r0
 914 0006 0D00     		movs	r5, r1
 915 0008 1700     		movs	r7, r2
 916 000a 0193     		str	r3, [sp, #4]
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 917              		.loc 1 233 0
 918 000c 184B     		ldr	r3, .L89
 919 000e 1B78     		ldrb	r3, [r3]
 920 0010 012B     		cmp	r3, #1
 921 0012 29D0     		beq	.L86
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 922              		.loc 1 233 0 is_stmt 0 discriminator 2
 923 0014 164B     		ldr	r3, .L89
 924 0016 0122     		movs	r2, #1
 925              	.LVL68:
 926 0018 1A70     		strb	r2, [r3]
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 927              		.loc 1 236 0 is_stmt 1 discriminator 2
 928 001a 0022     		movs	r2, #0
 929 001c 5A60     		str	r2, [r3, #4]
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 930              		.loc 1 239 0 discriminator 2
 931 001e FA20     		movs	r0, #250
 932              	.LVL69:
 933 0020 8000     		lsls	r0, r0, #2
 934 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 935              	.LVL70:
 936 0026 041E     		subs	r4, r0, #0
 937              	.LVL71:
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   {
 938              		.loc 1 241 0 discriminator 2
 939 0028 14D1     		bne	.L87
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     pFlash.Address = Address;
 940              		.loc 1 249 0
 941 002a 114B     		ldr	r3, .L89
 942 002c 9E60     		str	r6, [r3, #8]
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 943              		.loc 1 250 0
 944 002e DD60     		str	r5, [r3, #12]
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 945              		.loc 1 253 0
 946 0030 104B     		ldr	r3, .L89+4
 947 0032 9969     		ldr	r1, [r3, #24]
 948 0034 8022     		movs	r2, #128
 949 0036 5204     		lsls	r2, r2, #17
 950 0038 0A43     		orrs	r2, r1
 951 003a 9A61     		str	r2, [r3, #24]
 952 003c 5969     		ldr	r1, [r3, #20]
 953 003e C022     		movs	r2, #192
 954 0040 9204     		lsls	r2, r2, #18
 955 0042 0A43     		orrs	r2, r1
 956 0044 5A61     		str	r2, [r3, #20]
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     {
 957              		.loc 1 255 0
 958 0046 012E     		cmp	r6, #1
 959 0048 08D0     		beq	.L88
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
ARM GAS  /tmp/ccbAQPLA.s 			page 47


 960              		.loc 1 269 0
 961 004a 3900     		movs	r1, r7
 962 004c 2800     		movs	r0, r5
 963              	.LVL72:
 964 004e FFF7FEFF 		bl	FLASH_Program_Fast
 965              	.LVL73:
 966 0052 0AE0     		b	.L83
 967              	.LVL74:
 968              	.L87:
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****   }
 969              		.loc 1 244 0
 970 0054 064B     		ldr	r3, .L89
 971 0056 0022     		movs	r2, #0
 972 0058 1A70     		strb	r2, [r3]
 973 005a 06E0     		b	.L83
 974              	.L88:
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c ****     }
 975              		.loc 1 261 0
 976 005c 3A00     		movs	r2, r7
 977 005e 019B     		ldr	r3, [sp, #4]
 978 0060 2800     		movs	r0, r5
 979              	.LVL75:
 980 0062 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 981              	.LVL76:
 982 0066 00E0     		b	.L83
 983              	.LVL77:
 984              	.L86:
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 985              		.loc 1 233 0
 986 0068 0224     		movs	r4, #2
 987              	.LVL78:
 988              	.L83:
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c **** 
 989              		.loc 1 275 0
 990 006a 2000     		movs	r0, r4
 991 006c 03B0     		add	sp, sp, #12
 992              		@ sp needed
 993              	.LVL79:
 994              	.LVL80:
 995 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 996              	.L90:
 997              		.align	2
 998              	.L89:
 999 0070 00000000 		.word	.LANCHOR0
 1000 0074 00200240 		.word	1073881088
 1001              		.cfi_endproc
 1002              	.LFE174:
 1004              		.global	pFlash
 1005              		.section	.bss.pFlash,"aw",%nobits
 1006              		.align	2
 1007              		.set	.LANCHOR0,. + 0
 1010              	pFlash:
 1011 0000 00000000 		.space	24
 1011      00000000 
 1011      00000000 
 1011      00000000 
 1011      00000000 
ARM GAS  /tmp/ccbAQPLA.s 			page 48


 1012              		.text
 1013              	.Letext0:
 1014              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1015              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1016              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 1017              		.file 6 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 1018              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 1019              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 1020              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 1021              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash_ex.h"
ARM GAS  /tmp/ccbAQPLA.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 stm32g0xx_hal_flash.c
     /tmp/ccbAQPLA.s:16     .text.FLASH_Program_DoubleWord:00000000 $t
     /tmp/ccbAQPLA.s:22     .text.FLASH_Program_DoubleWord:00000000 FLASH_Program_DoubleWord
     /tmp/ccbAQPLA.s:64     .text.FLASH_Program_DoubleWord:00000018 $d
     /tmp/ccbAQPLA.s:69     .RamFunc:00000000 $t
     /tmp/ccbAQPLA.s:75     .RamFunc:00000000 FLASH_Program_Fast
     /tmp/ccbAQPLA.s:162    .RamFunc:00000034 $d
     /tmp/ccbAQPLA.s:167    .text.HAL_FLASH_EndOfOperationCallback:00000000 $t
     /tmp/ccbAQPLA.s:174    .text.HAL_FLASH_EndOfOperationCallback:00000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccbAQPLA.s:189    .text.HAL_FLASH_OperationErrorCallback:00000000 $t
     /tmp/ccbAQPLA.s:196    .text.HAL_FLASH_OperationErrorCallback:00000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccbAQPLA.s:211    .text.HAL_FLASH_IRQHandler:00000000 $t
     /tmp/ccbAQPLA.s:218    .text.HAL_FLASH_IRQHandler:00000000 HAL_FLASH_IRQHandler
     /tmp/ccbAQPLA.s:387    .text.HAL_FLASH_IRQHandler:000000d0 $d
     /tmp/ccbAQPLA.s:397    .text.HAL_FLASH_Unlock:00000000 $t
     /tmp/ccbAQPLA.s:404    .text.HAL_FLASH_Unlock:00000000 HAL_FLASH_Unlock
     /tmp/ccbAQPLA.s:447    .text.HAL_FLASH_Unlock:00000024 $d
     /tmp/ccbAQPLA.s:454    .text.HAL_FLASH_Lock:00000000 $t
     /tmp/ccbAQPLA.s:461    .text.HAL_FLASH_Lock:00000000 HAL_FLASH_Lock
     /tmp/ccbAQPLA.s:495    .text.HAL_FLASH_Lock:0000001c $d
     /tmp/ccbAQPLA.s:500    .text.HAL_FLASH_OB_Unlock:00000000 $t
     /tmp/ccbAQPLA.s:507    .text.HAL_FLASH_OB_Unlock:00000000 HAL_FLASH_OB_Unlock
     /tmp/ccbAQPLA.s:548    .text.HAL_FLASH_OB_Unlock:00000024 $d
     /tmp/ccbAQPLA.s:555    .text.HAL_FLASH_OB_Lock:00000000 $t
     /tmp/ccbAQPLA.s:562    .text.HAL_FLASH_OB_Lock:00000000 HAL_FLASH_OB_Lock
     /tmp/ccbAQPLA.s:596    .text.HAL_FLASH_OB_Lock:0000001c $d
     /tmp/ccbAQPLA.s:601    .text.HAL_FLASH_OB_Launch:00000000 $t
     /tmp/ccbAQPLA.s:608    .text.HAL_FLASH_OB_Launch:00000000 HAL_FLASH_OB_Launch
     /tmp/ccbAQPLA.s:629    .text.HAL_FLASH_OB_Launch:00000010 $d
     /tmp/ccbAQPLA.s:634    .text.HAL_FLASH_GetError:00000000 $t
     /tmp/ccbAQPLA.s:641    .text.HAL_FLASH_GetError:00000000 HAL_FLASH_GetError
     /tmp/ccbAQPLA.s:657    .text.HAL_FLASH_GetError:00000008 $d
     /tmp/ccbAQPLA.s:662    .text.FLASH_WaitForLastOperation:00000000 $t
     /tmp/ccbAQPLA.s:669    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
     /tmp/ccbAQPLA.s:773    .text.FLASH_WaitForLastOperation:00000068 $d
     /tmp/ccbAQPLA.s:781    .text.HAL_FLASH_Program:00000000 $t
     /tmp/ccbAQPLA.s:788    .text.HAL_FLASH_Program:00000000 HAL_FLASH_Program
     /tmp/ccbAQPLA.s:882    .text.HAL_FLASH_Program:0000005c $d
     /tmp/ccbAQPLA.s:888    .text.HAL_FLASH_Program_IT:00000000 $t
     /tmp/ccbAQPLA.s:895    .text.HAL_FLASH_Program_IT:00000000 HAL_FLASH_Program_IT
     /tmp/ccbAQPLA.s:999    .text.HAL_FLASH_Program_IT:00000070 $d
     /tmp/ccbAQPLA.s:1010   .bss.pFlash:00000000 pFlash
     /tmp/ccbAQPLA.s:1006   .bss.pFlash:00000000 $d

UNDEFINED SYMBOLS
FLASH_PageErase
HAL_GetTick
