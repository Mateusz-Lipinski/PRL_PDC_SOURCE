ARM GAS  /tmp/ccJiwRGg.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32g0xx_hal_pwr_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWREx_EnableBatteryCharging
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWREx_EnableBatteryCharging:
  24              	.LFB173:
  25              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c"
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @file    stm32g0xx_hal_pwr_ex.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           + Extended Initialization and de-initialization functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           + Extended Peripheral Control functions
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   ******************************************************************************
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @attention
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics. 
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * All rights reserved.</center></h2>
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * the "License"; You may not use this file except in compliance with the 
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * License. You may obtain a copy of the License at:
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   ******************************************************************************
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #include "stm32g0xx_hal.h"
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @addtogroup STM32G0xx_HAL_Driver
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @addtogroup PWREx
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
ARM GAS  /tmp/ccJiwRGg.s 			page 2


  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @defgroup PWR_Extended_Private_Defines PWR Extended Private Defines
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @defgroup PWREx_TimeOut_Value  PWREx Flag Setting Time Out Value
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #define PWR_REGLPF_SETTING_DELAY_6_US       6u  /*!< REGLPF should rise in about 5 us plus
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****                                                      2 APB clock. Taking in account max Sysclk at
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****                                                      2 MHz, and rounded to upper value */
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #define PWR_VOSF_SETTING_DELAY_6_US         6u  /*!< VOSF should rise in about 5 us plus
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****                                                      2 APB clock. Taking in account max Sysclk at
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****                                                      16 MHz, and rounded to upper value */
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @}
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @defgroup PWREx_Gpio_Pin_Number  PWREx Gpio Pin Number
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #define PWR_GPIO_PIN_NB                     16u  /*!< Number of gpio pin in bank */
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @}
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @}
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Exported_Functions PWR Extended Exported Functions
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Exported_Functions_Group1 Extended Peripheral Control functions
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *  @brief   Extended Peripheral Control functions
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** @verbatim
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****  ===============================================================================
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   ##### Extended Peripheral Initialization and de-initialization functions #####
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****  ===============================================================================
  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     [..]
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** @endverbatim
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @{
  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccJiwRGg.s 			page 3


  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable battery charging.
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery on VBAT thru an
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         internal resistor.
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  ResistorSelection specifies the resistor impedance.
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
  26              		.loc 1 102 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   uint32_t tmpreg;
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Specify resistor selection and enable battery charging */
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   tmpreg = (PWR->CR4 & ~PWR_CR4_VBRS);
  32              		.loc 1 107 0
  33 0000 044A     		ldr	r2, .L2
  34 0002 D368     		ldr	r3, [r2, #12]
  35 0004 0449     		ldr	r1, .L2+4
  36 0006 0B40     		ands	r3, r1
  37              	.LVL1:
 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   PWR->CR4 = (tmpreg | ResistorSelection | PWR_CR4_VBE);
  38              		.loc 1 108 0
  39 0008 1843     		orrs	r0, r3
  40              	.LVL2:
  41 000a 8023     		movs	r3, #128
  42              	.LVL3:
  43 000c 5B00     		lsls	r3, r3, #1
  44 000e 1843     		orrs	r0, r3
  45 0010 D060     		str	r0, [r2, #12]
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
  46              		.loc 1 109 0
  47              		@ sp needed
  48 0012 7047     		bx	lr
  49              	.L3:
  50              		.align	2
  51              	.L2:
  52 0014 00700040 		.word	1073770496
  53 0018 FFFDFFFF 		.word	-513
  54              		.cfi_endproc
  55              	.LFE173:
  57              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
  58              		.align	1
  59              		.global	HAL_PWREx_DisableBatteryCharging
  60              		.syntax unified
  61              		.code	16
  62              		.thumb_func
  63              		.fpu softvfp
  65              	HAL_PWREx_DisableBatteryCharging:
ARM GAS  /tmp/ccJiwRGg.s 			page 4


  66              	.LFB174:
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Disable battery charging.
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging(void)
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
  67              		.loc 1 117 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
  72              		.loc 1 118 0
  73 0000 024A     		ldr	r2, .L5
  74 0002 D368     		ldr	r3, [r2, #12]
  75 0004 0249     		ldr	r1, .L5+4
  76 0006 0B40     		ands	r3, r1
  77 0008 D360     		str	r3, [r2, #12]
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
  78              		.loc 1 119 0
  79              		@ sp needed
  80 000a 7047     		bx	lr
  81              	.L6:
  82              		.align	2
  83              	.L5:
  84 000c 00700040 		.word	1073770496
  85 0010 FFFEFFFF 		.word	-257
  86              		.cfi_endproc
  87              	.LFE174:
  89              		.section	.text.HAL_PWREx_EnablePORMonitorSampling,"ax",%progbits
  90              		.align	1
  91              		.global	HAL_PWREx_EnablePORMonitorSampling
  92              		.syntax unified
  93              		.code	16
  94              		.thumb_func
  95              		.fpu softvfp
  97              	HAL_PWREx_EnablePORMonitorSampling:
  98              	.LFB175:
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #if defined(PWR_CR3_ENB_ULP)
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable POR Monitor sampling mode.
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   When entering ultra low power modes (standby, shutdown) this feature
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         can be enabled to reduce further consumption: Power On Reset monitor
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         is then set in sampling mode, and no more in always on mode.
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePORMonitorSampling(void)
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
  99              		.loc 1 130 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
ARM GAS  /tmp/ccJiwRGg.s 			page 5


 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   PWR->CR3 |= PWR_CR3_ENB_ULP;
 104              		.loc 1 131 0
 105 0000 034A     		ldr	r2, .L8
 106 0002 9168     		ldr	r1, [r2, #8]
 107 0004 8023     		movs	r3, #128
 108 0006 9B00     		lsls	r3, r3, #2
 109 0008 0B43     		orrs	r3, r1
 110 000a 9360     		str	r3, [r2, #8]
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 111              		.loc 1 132 0
 112              		@ sp needed
 113 000c 7047     		bx	lr
 114              	.L9:
 115 000e C046     		.align	2
 116              	.L8:
 117 0010 00700040 		.word	1073770496
 118              		.cfi_endproc
 119              	.LFE175:
 121              		.section	.text.HAL_PWREx_DisablePORMonitorSampling,"ax",%progbits
 122              		.align	1
 123              		.global	HAL_PWREx_DisablePORMonitorSampling
 124              		.syntax unified
 125              		.code	16
 126              		.thumb_func
 127              		.fpu softvfp
 129              	HAL_PWREx_DisablePORMonitorSampling:
 130              	.LFB176:
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable POR Monitor sampling mode.
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePORMonitorSampling(void)
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 131              		.loc 1 140 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   PWR->CR3 &= ~PWR_CR3_ENB_ULP;
 136              		.loc 1 141 0
 137 0000 024A     		ldr	r2, .L11
 138 0002 9368     		ldr	r3, [r2, #8]
 139 0004 0249     		ldr	r1, .L11+4
 140 0006 0B40     		ands	r3, r1
 141 0008 9360     		str	r3, [r2, #8]
 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 142              		.loc 1 142 0
 143              		@ sp needed
 144 000a 7047     		bx	lr
 145              	.L12:
 146              		.align	2
 147              	.L11:
 148 000c 00700040 		.word	1073770496
 149 0010 FFFDFFFF 		.word	-513
 150              		.cfi_endproc
ARM GAS  /tmp/ccJiwRGg.s 			page 6


 151              	.LFE176:
 153              		.section	.text.HAL_PWREx_EnableInternalWakeUpLine,"ax",%progbits
 154              		.align	1
 155              		.global	HAL_PWREx_EnableInternalWakeUpLine
 156              		.syntax unified
 157              		.code	16
 158              		.thumb_func
 159              		.fpu softvfp
 161              	HAL_PWREx_EnableInternalWakeUpLine:
 162              	.LFB177:
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #endif
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable Internal Wake-up Line.
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnableInternalWakeUpLine(void)
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 163              		.loc 1 151 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_EIWUL);
 168              		.loc 1 152 0
 169 0000 034A     		ldr	r2, .L14
 170 0002 9168     		ldr	r1, [r2, #8]
 171 0004 8023     		movs	r3, #128
 172 0006 1B02     		lsls	r3, r3, #8
 173 0008 0B43     		orrs	r3, r1
 174 000a 9360     		str	r3, [r2, #8]
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 175              		.loc 1 153 0
 176              		@ sp needed
 177 000c 7047     		bx	lr
 178              	.L15:
 179 000e C046     		.align	2
 180              	.L14:
 181 0010 00700040 		.word	1073770496
 182              		.cfi_endproc
 183              	.LFE177:
 185              		.section	.text.HAL_PWREx_DisableInternalWakeUpLine,"ax",%progbits
 186              		.align	1
 187              		.global	HAL_PWREx_DisableInternalWakeUpLine
 188              		.syntax unified
 189              		.code	16
 190              		.thumb_func
 191              		.fpu softvfp
 193              	HAL_PWREx_DisableInternalWakeUpLine:
 194              	.LFB178:
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable Internal Wake-up Line.
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/ccJiwRGg.s 			page 7


 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisableInternalWakeUpLine(void)
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 195              		.loc 1 161 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EIWUL);
 200              		.loc 1 162 0
 201 0000 024A     		ldr	r2, .L17
 202 0002 9368     		ldr	r3, [r2, #8]
 203 0004 0249     		ldr	r1, .L17+4
 204 0006 0B40     		ands	r3, r1
 205 0008 9360     		str	r3, [r2, #8]
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 206              		.loc 1 163 0
 207              		@ sp needed
 208 000a 7047     		bx	lr
 209              	.L18:
 210              		.align	2
 211              	.L17:
 212 000c 00700040 		.word	1073770496
 213 0010 FF7FFFFF 		.word	-32769
 214              		.cfi_endproc
 215              	.LFE178:
 217              		.section	.text.HAL_PWREx_EnableGPIOPullUp,"ax",%progbits
 218              		.align	1
 219              		.global	HAL_PWREx_EnableGPIOPullUp
 220              		.syntax unified
 221              		.code	16
 222              		.thumb_func
 223              		.fpu softvfp
 225              	HAL_PWREx_EnableGPIOPullUp:
 226              	.LFB179:
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable GPIO pull-up state in Standby and Shutdown modes.
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   Set the relevant PUy bit of PWR_PUCRx register to configure the I/O in
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         pull-up state in Standby and Shutdown modes.
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   This state is effective in Standby and Shutdown modes only if APC bit
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   The configuration is lost when exiting the Shutdown mode due to the
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         power-on reset, maintained when exiting the Standby mode.
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   To avoid any conflict at Standby and Shutdown modes exits, the corresponding
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PDy bit of PWR_PDCRx register is cleared unless it is reserved.
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIO Specify the IO port. This parameter can be PWR_GPIO_A, ..., PWR_GPIO_F
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         to select the GPIO peripheral.
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIONumber Specify the I/O pins numbers.
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for ports where less
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to set
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/ccJiwRGg.s 			page 8


 227              		.loc 1 186 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 232              	.LVL4:
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   switch (GPIO)
 233              		.loc 1 192 0
 234 0000 0528     		cmp	r0, #5
 235 0002 34D8     		bhi	.L27
 236 0004 8000     		lsls	r0, r0, #2
 237              	.LVL5:
 238 0006 1B4B     		ldr	r3, .L28
 239 0008 1B58     		ldr	r3, [r3, r0]
 240 000a 9F46     		mov	pc, r3
 241              		.section	.rodata.HAL_PWREx_EnableGPIOPullUp,"a",%progbits
 242              		.align	2
 243              	.L22:
 244 0000 0C000000 		.word	.L21
 245 0004 26000000 		.word	.L23
 246 0008 38000000 		.word	.L24
 247 000c 4A000000 		.word	.L25
 248 0010 6E000000 		.word	.L27
 249 0014 5C000000 		.word	.L26
 250              		.section	.text.HAL_PWREx_EnableGPIOPullUp
 251              	.L21:
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRA, (GPIONumber & ~PWR_GPIO_BIT_14));
 252              		.loc 1 195 0
 253 000c 1A4B     		ldr	r3, .L28+4
 254 000e 1A6A     		ldr	r2, [r3, #32]
 255 0010 1A48     		ldr	r0, .L28+8
 256 0012 0840     		ands	r0, r1
 257 0014 0243     		orrs	r2, r0
 258 0016 1A62     		str	r2, [r3, #32]
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRA, (GPIONumber & ~PWR_GPIO_BIT_13));
 259              		.loc 1 196 0
 260 0018 5A6A     		ldr	r2, [r3, #36]
 261 001a 1948     		ldr	r0, .L28+12
 262 001c 0140     		ands	r1, r0
 263              	.LVL6:
 264 001e 8A43     		bics	r2, r1
 265 0020 5A62     		str	r2, [r3, #36]
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 266              		.loc 1 187 0
 267 0022 0020     		movs	r0, #0
 268              	.L20:
 269              	.LVL7:
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
ARM GAS  /tmp/ccJiwRGg.s 			page 9


 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRB, GPIONumber);
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRB, GPIONumber);
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRC, GPIONumber);
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRC, GPIONumber);
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRD, GPIONumber);
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRD, GPIONumber);
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRF, GPIONumber);
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRF, GPIONumber);
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     default:
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return status;
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 270              		.loc 1 225 0
 271              		@ sp needed
 272 0024 7047     		bx	lr
 273              	.LVL8:
 274              	.L23:
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRB, GPIONumber);
 275              		.loc 1 200 0
 276 0026 144B     		ldr	r3, .L28+4
 277 0028 9A6A     		ldr	r2, [r3, #40]
 278 002a 0A43     		orrs	r2, r1
 279 002c 9A62     		str	r2, [r3, #40]
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 280              		.loc 1 201 0
 281 002e DA6A     		ldr	r2, [r3, #44]
 282 0030 8A43     		bics	r2, r1
 283 0032 DA62     		str	r2, [r3, #44]
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 284              		.loc 1 187 0
 285 0034 0020     		movs	r0, #0
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 286              		.loc 1 202 0
 287 0036 F5E7     		b	.L20
 288              	.L24:
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRC, GPIONumber);
 289              		.loc 1 205 0
 290 0038 0F4B     		ldr	r3, .L28+4
 291 003a 1A6B     		ldr	r2, [r3, #48]
 292 003c 0A43     		orrs	r2, r1
 293 003e 1A63     		str	r2, [r3, #48]
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 294              		.loc 1 206 0
ARM GAS  /tmp/ccJiwRGg.s 			page 10


 295 0040 5A6B     		ldr	r2, [r3, #52]
 296 0042 8A43     		bics	r2, r1
 297 0044 5A63     		str	r2, [r3, #52]
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 298              		.loc 1 187 0
 299 0046 0020     		movs	r0, #0
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 300              		.loc 1 207 0
 301 0048 ECE7     		b	.L20
 302              	.L25:
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRD, GPIONumber);
 303              		.loc 1 210 0
 304 004a 0B4B     		ldr	r3, .L28+4
 305 004c 9A6B     		ldr	r2, [r3, #56]
 306 004e 0A43     		orrs	r2, r1
 307 0050 9A63     		str	r2, [r3, #56]
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 308              		.loc 1 211 0
 309 0052 DA6B     		ldr	r2, [r3, #60]
 310 0054 8A43     		bics	r2, r1
 311 0056 DA63     		str	r2, [r3, #60]
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 312              		.loc 1 187 0
 313 0058 0020     		movs	r0, #0
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 314              		.loc 1 212 0
 315 005a E3E7     		b	.L20
 316              	.L26:
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRF, GPIONumber);
 317              		.loc 1 215 0
 318 005c 064B     		ldr	r3, .L28+4
 319 005e 9A6C     		ldr	r2, [r3, #72]
 320 0060 0A43     		orrs	r2, r1
 321 0062 9A64     		str	r2, [r3, #72]
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 322              		.loc 1 216 0
 323 0064 DA6C     		ldr	r2, [r3, #76]
 324 0066 8A43     		bics	r2, r1
 325 0068 DA64     		str	r2, [r3, #76]
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 326              		.loc 1 187 0
 327 006a 0020     		movs	r0, #0
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 328              		.loc 1 217 0
 329 006c DAE7     		b	.L20
 330              	.L27:
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 331              		.loc 1 220 0
 332 006e 0120     		movs	r0, #1
 333 0070 D8E7     		b	.L20
 334              	.L29:
 335 0072 C046     		.align	2
 336              	.L28:
 337 0074 00000000 		.word	.L22
 338 0078 00700040 		.word	1073770496
 339 007c FFBFFFFF 		.word	-16385
 340 0080 FFDFFFFF 		.word	-8193
ARM GAS  /tmp/ccJiwRGg.s 			page 11


 341              		.cfi_endproc
 342              	.LFE179:
 344              		.section	.text.HAL_PWREx_DisableGPIOPullUp,"ax",%progbits
 345              		.align	1
 346              		.global	HAL_PWREx_DisableGPIOPullUp
 347              		.syntax unified
 348              		.code	16
 349              		.thumb_func
 350              		.fpu softvfp
 352              	HAL_PWREx_DisableGPIOPullUp:
 353              	.LFB180:
 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable GPIO pull-up state in Standby mode and Shutdown modes.
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   Reset the relevant PUy bit of PWR_PUCRx register used to configure the I/O
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         in pull-up state in Standby and Shutdown modes.
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIO Specifies the IO port. This parameter can be PWR_GPIO_A, ..., PWR_GPIO_F
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         to select the GPIO peripheral.
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIONumber Specify the I/O pins numbers.
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for ports where less
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to reset
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 354              		.loc 1 242 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359              	.LVL9:
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   switch (GPIO)
 360              		.loc 1 248 0
 361 0000 0528     		cmp	r0, #5
 362 0002 23D8     		bhi	.L38
 363 0004 8000     		lsls	r0, r0, #2
 364              	.LVL10:
 365 0006 124B     		ldr	r3, .L39
 366 0008 1B58     		ldr	r3, [r3, r0]
 367 000a 9F46     		mov	pc, r3
 368              		.section	.rodata.HAL_PWREx_DisableGPIOPullUp,"a",%progbits
 369              		.align	2
 370              	.L33:
 371 0000 0C000000 		.word	.L32
 372 0004 1C000000 		.word	.L34
 373 0008 28000000 		.word	.L35
 374 000c 34000000 		.word	.L36
 375 0010 4C000000 		.word	.L38
 376 0014 40000000 		.word	.L37
ARM GAS  /tmp/ccJiwRGg.s 			page 12


 377              		.section	.text.HAL_PWREx_DisableGPIOPullUp
 378              	.L32:
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PUCRA, (GPIONumber & ~PWR_GPIO_BIT_14));
 379              		.loc 1 251 0
 380 000c 1148     		ldr	r0, .L39+4
 381 000e 036A     		ldr	r3, [r0, #32]
 382 0010 114A     		ldr	r2, .L39+8
 383 0012 1140     		ands	r1, r2
 384              	.LVL11:
 385 0014 8B43     		bics	r3, r1
 386 0016 0362     		str	r3, [r0, #32]
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 387              		.loc 1 243 0
 388 0018 0020     		movs	r0, #0
 389              	.L31:
 390              	.LVL12:
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     default:
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        status = HAL_ERROR;
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return status;
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 391              		.loc 1 276 0
 392              		@ sp needed
 393 001a 7047     		bx	lr
 394              	.LVL13:
 395              	.L34:
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 396              		.loc 1 255 0
 397 001c 0D4A     		ldr	r2, .L39+4
 398 001e 936A     		ldr	r3, [r2, #40]
 399 0020 8B43     		bics	r3, r1
 400 0022 9362     		str	r3, [r2, #40]
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 401              		.loc 1 243 0
 402 0024 0020     		movs	r0, #0
ARM GAS  /tmp/ccJiwRGg.s 			page 13


 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 403              		.loc 1 256 0
 404 0026 F8E7     		b	.L31
 405              	.L35:
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 406              		.loc 1 259 0
 407 0028 0A4A     		ldr	r2, .L39+4
 408 002a 136B     		ldr	r3, [r2, #48]
 409 002c 8B43     		bics	r3, r1
 410 002e 1363     		str	r3, [r2, #48]
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 411              		.loc 1 243 0
 412 0030 0020     		movs	r0, #0
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 413              		.loc 1 260 0
 414 0032 F2E7     		b	.L31
 415              	.L36:
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 416              		.loc 1 263 0
 417 0034 074A     		ldr	r2, .L39+4
 418 0036 936B     		ldr	r3, [r2, #56]
 419 0038 8B43     		bics	r3, r1
 420 003a 9363     		str	r3, [r2, #56]
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 421              		.loc 1 243 0
 422 003c 0020     		movs	r0, #0
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 423              		.loc 1 264 0
 424 003e ECE7     		b	.L31
 425              	.L37:
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 426              		.loc 1 267 0
 427 0040 044A     		ldr	r2, .L39+4
 428 0042 936C     		ldr	r3, [r2, #72]
 429 0044 8B43     		bics	r3, r1
 430 0046 9364     		str	r3, [r2, #72]
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 431              		.loc 1 243 0
 432 0048 0020     		movs	r0, #0
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 433              		.loc 1 268 0
 434 004a E6E7     		b	.L31
 435              	.L38:
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 436              		.loc 1 271 0
 437 004c 0120     		movs	r0, #1
 438 004e E4E7     		b	.L31
 439              	.L40:
 440              		.align	2
 441              	.L39:
 442 0050 00000000 		.word	.L33
 443 0054 00700040 		.word	1073770496
 444 0058 FFBFFFFF 		.word	-16385
 445              		.cfi_endproc
 446              	.LFE180:
 448              		.section	.text.HAL_PWREx_EnableGPIOPullDown,"ax",%progbits
 449              		.align	1
ARM GAS  /tmp/ccJiwRGg.s 			page 14


 450              		.global	HAL_PWREx_EnableGPIOPullDown
 451              		.syntax unified
 452              		.code	16
 453              		.thumb_func
 454              		.fpu softvfp
 456              	HAL_PWREx_EnableGPIOPullDown:
 457              	.LFB181:
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable GPIO pull-down state in Standby and Shutdown modes.
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   Set the relevant PDy bit of PWR_PDCRx register to configure the I/O in
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         pull-down state in Standby and Shutdown modes.
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   This state is effective in Standby and Shutdown modes only if APC bit
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   The configuration is lost when exiting the Shutdown mode due to the
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         power-on reset, maintained when exiting the Standby mode.
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   To avoid any conflict at Standby and Shutdown modes exits, the corresponding
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PUy bit of PWR_PUCRx register is cleared unless it is reserved.
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIO Specify the IO port. This parameter can be PWR_GPIO_A..PWR_GPIO_F
 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         to select the GPIO peripheral.
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIONumber Specify the I/O pins numbers.
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for ports where less
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to set
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 458              		.loc 1 299 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463              	.LVL14:
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   switch (GPIO)
 464              		.loc 1 305 0
 465 0000 0528     		cmp	r0, #5
 466 0002 34D8     		bhi	.L49
 467 0004 8000     		lsls	r0, r0, #2
 468              	.LVL15:
 469 0006 1B4B     		ldr	r3, .L50
 470 0008 1B58     		ldr	r3, [r3, r0]
 471 000a 9F46     		mov	pc, r3
 472              		.section	.rodata.HAL_PWREx_EnableGPIOPullDown,"a",%progbits
 473              		.align	2
 474              	.L44:
 475 0000 0C000000 		.word	.L43
 476 0004 26000000 		.word	.L45
 477 0008 38000000 		.word	.L46
 478 000c 4A000000 		.word	.L47
ARM GAS  /tmp/ccJiwRGg.s 			page 15


 479 0010 6E000000 		.word	.L49
 480 0014 5C000000 		.word	.L48
 481              		.section	.text.HAL_PWREx_EnableGPIOPullDown
 482              	.L43:
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRA, (GPIONumber & ~PWR_GPIO_BIT_13));
 483              		.loc 1 308 0
 484 000c 1A4B     		ldr	r3, .L50+4
 485 000e 5A6A     		ldr	r2, [r3, #36]
 486 0010 1A48     		ldr	r0, .L50+8
 487 0012 0840     		ands	r0, r1
 488 0014 0243     		orrs	r2, r0
 489 0016 5A62     		str	r2, [r3, #36]
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRA, (GPIONumber & ~PWR_GPIO_BIT_14));
 490              		.loc 1 309 0
 491 0018 1A6A     		ldr	r2, [r3, #32]
 492 001a 1948     		ldr	r0, .L50+12
 493 001c 0140     		ands	r1, r0
 494              	.LVL16:
 495 001e 8A43     		bics	r2, r1
 496 0020 1A62     		str	r2, [r3, #32]
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 497              		.loc 1 300 0
 498 0022 0020     		movs	r0, #0
 499              	.L42:
 500              	.LVL17:
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRB, GPIONumber);
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRC, GPIONumber);
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRC, GPIONumber);
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRD, GPIONumber);
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRD, GPIONumber);
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRF, GPIONumber);
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRF, GPIONumber);
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     default:
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return status;
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 501              		.loc 1 338 0
ARM GAS  /tmp/ccJiwRGg.s 			page 16


 502              		@ sp needed
 503 0024 7047     		bx	lr
 504              	.LVL18:
 505              	.L45:
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 506              		.loc 1 313 0
 507 0026 144B     		ldr	r3, .L50+4
 508 0028 DA6A     		ldr	r2, [r3, #44]
 509 002a 0A43     		orrs	r2, r1
 510 002c DA62     		str	r2, [r3, #44]
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 511              		.loc 1 314 0
 512 002e 9A6A     		ldr	r2, [r3, #40]
 513 0030 8A43     		bics	r2, r1
 514 0032 9A62     		str	r2, [r3, #40]
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 515              		.loc 1 300 0
 516 0034 0020     		movs	r0, #0
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 517              		.loc 1 315 0
 518 0036 F5E7     		b	.L42
 519              	.L46:
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRC, GPIONumber);
 520              		.loc 1 318 0
 521 0038 0F4B     		ldr	r3, .L50+4
 522 003a 5A6B     		ldr	r2, [r3, #52]
 523 003c 0A43     		orrs	r2, r1
 524 003e 5A63     		str	r2, [r3, #52]
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 525              		.loc 1 319 0
 526 0040 1A6B     		ldr	r2, [r3, #48]
 527 0042 8A43     		bics	r2, r1
 528 0044 1A63     		str	r2, [r3, #48]
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 529              		.loc 1 300 0
 530 0046 0020     		movs	r0, #0
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 531              		.loc 1 320 0
 532 0048 ECE7     		b	.L42
 533              	.L47:
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRD, GPIONumber);
 534              		.loc 1 323 0
 535 004a 0B4B     		ldr	r3, .L50+4
 536 004c DA6B     		ldr	r2, [r3, #60]
 537 004e 0A43     		orrs	r2, r1
 538 0050 DA63     		str	r2, [r3, #60]
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 539              		.loc 1 324 0
 540 0052 9A6B     		ldr	r2, [r3, #56]
 541 0054 8A43     		bics	r2, r1
 542 0056 9A63     		str	r2, [r3, #56]
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 543              		.loc 1 300 0
 544 0058 0020     		movs	r0, #0
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 545              		.loc 1 325 0
 546 005a E3E7     		b	.L42
ARM GAS  /tmp/ccJiwRGg.s 			page 17


 547              	.L48:
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRF, GPIONumber);
 548              		.loc 1 328 0
 549 005c 064B     		ldr	r3, .L50+4
 550 005e DA6C     		ldr	r2, [r3, #76]
 551 0060 0A43     		orrs	r2, r1
 552 0062 DA64     		str	r2, [r3, #76]
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****        break;
 553              		.loc 1 329 0
 554 0064 9A6C     		ldr	r2, [r3, #72]
 555 0066 8A43     		bics	r2, r1
 556 0068 9A64     		str	r2, [r3, #72]
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 557              		.loc 1 300 0
 558 006a 0020     		movs	r0, #0
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 559              		.loc 1 330 0
 560 006c DAE7     		b	.L42
 561              	.L49:
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 562              		.loc 1 333 0
 563 006e 0120     		movs	r0, #1
 564 0070 D8E7     		b	.L42
 565              	.L51:
 566 0072 C046     		.align	2
 567              	.L50:
 568 0074 00000000 		.word	.L44
 569 0078 00700040 		.word	1073770496
 570 007c FFDFFFFF 		.word	-8193
 571 0080 FFBFFFFF 		.word	-16385
 572              		.cfi_endproc
 573              	.LFE181:
 575              		.section	.text.HAL_PWREx_DisableGPIOPullDown,"ax",%progbits
 576              		.align	1
 577              		.global	HAL_PWREx_DisableGPIOPullDown
 578              		.syntax unified
 579              		.code	16
 580              		.thumb_func
 581              		.fpu softvfp
 583              	HAL_PWREx_DisableGPIOPullDown:
 584              	.LFB182:
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable GPIO pull-down state in Standby and Shutdown modes.
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   Reset the relevant PDy bit of PWR_PDCRx register used to configure the I/O
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         in pull-down state in Standby and Shutdown modes.
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIO Specifies the IO port. This parameter can be PWR_GPIO_A..PWR_GPIO_F
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         to select the GPIO peripheral.
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  GPIONumber Specify the I/O pins numbers.
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for ports where less
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to reset
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
ARM GAS  /tmp/ccJiwRGg.s 			page 18


 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 585              		.loc 1 355 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590              	.LVL19:
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   switch (GPIO)
 591              		.loc 1 361 0
 592 0000 0528     		cmp	r0, #5
 593 0002 23D8     		bhi	.L60
 594 0004 8000     		lsls	r0, r0, #2
 595              	.LVL20:
 596 0006 124B     		ldr	r3, .L61
 597 0008 1B58     		ldr	r3, [r3, r0]
 598 000a 9F46     		mov	pc, r3
 599              		.section	.rodata.HAL_PWREx_DisableGPIOPullDown,"a",%progbits
 600              		.align	2
 601              	.L55:
 602 0000 0C000000 		.word	.L54
 603 0004 1C000000 		.word	.L56
 604 0008 28000000 		.word	.L57
 605 000c 34000000 		.word	.L58
 606 0010 4C000000 		.word	.L60
 607 0014 40000000 		.word	.L59
 608              		.section	.text.HAL_PWREx_DisableGPIOPullDown
 609              	.L54:
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PDCRA, (GPIONumber & ~PWR_GPIO_BIT_13));
 610              		.loc 1 364 0
 611 000c 1148     		ldr	r0, .L61+4
 612 000e 436A     		ldr	r3, [r0, #36]
 613 0010 114A     		ldr	r2, .L61+8
 614 0012 1140     		ands	r1, r2
 615              	.LVL21:
 616 0014 8B43     		bics	r3, r1
 617 0016 4362     		str	r3, [r0, #36]
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 618              		.loc 1 356 0
 619 0018 0020     		movs	r0, #0
 620              	.L53:
 621              	.LVL22:
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PDCRB, GPIONumber);
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
ARM GAS  /tmp/ccJiwRGg.s 			page 19


 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     default:
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return status;
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 622              		.loc 1 389 0
 623              		@ sp needed
 624 001a 7047     		bx	lr
 625              	.LVL23:
 626              	.L56:
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 627              		.loc 1 368 0
 628 001c 0D4A     		ldr	r2, .L61+4
 629 001e D36A     		ldr	r3, [r2, #44]
 630 0020 8B43     		bics	r3, r1
 631 0022 D362     		str	r3, [r2, #44]
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 632              		.loc 1 356 0
 633 0024 0020     		movs	r0, #0
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 634              		.loc 1 369 0
 635 0026 F8E7     		b	.L53
 636              	.L57:
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 637              		.loc 1 372 0
 638 0028 0A4A     		ldr	r2, .L61+4
 639 002a 536B     		ldr	r3, [r2, #52]
 640 002c 8B43     		bics	r3, r1
 641 002e 5363     		str	r3, [r2, #52]
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 642              		.loc 1 356 0
 643 0030 0020     		movs	r0, #0
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 644              		.loc 1 373 0
 645 0032 F2E7     		b	.L53
 646              	.L58:
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 647              		.loc 1 376 0
 648 0034 074A     		ldr	r2, .L61+4
 649 0036 D36B     		ldr	r3, [r2, #60]
 650 0038 8B43     		bics	r3, r1
 651 003a D363     		str	r3, [r2, #60]
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 652              		.loc 1 356 0
 653 003c 0020     		movs	r0, #0
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccJiwRGg.s 			page 20


 654              		.loc 1 377 0
 655 003e ECE7     		b	.L53
 656              	.L59:
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 657              		.loc 1 380 0
 658 0040 044A     		ldr	r2, .L61+4
 659 0042 D36C     		ldr	r3, [r2, #76]
 660 0044 8B43     		bics	r3, r1
 661 0046 D364     		str	r3, [r2, #76]
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 662              		.loc 1 356 0
 663 0048 0020     		movs	r0, #0
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 664              		.loc 1 381 0
 665 004a E6E7     		b	.L53
 666              	.L60:
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       break;
 667              		.loc 1 384 0
 668 004c 0120     		movs	r0, #1
 669 004e E4E7     		b	.L53
 670              	.L62:
 671              		.align	2
 672              	.L61:
 673 0050 00000000 		.word	.L55
 674 0054 00700040 		.word	1073770496
 675 0058 FFDFFFFF 		.word	-8193
 676              		.cfi_endproc
 677              	.LFE182:
 679              		.section	.text.HAL_PWREx_EnablePullUpPullDownConfig,"ax",%progbits
 680              		.align	1
 681              		.global	HAL_PWREx_EnablePullUpPullDownConfig
 682              		.syntax unified
 683              		.code	16
 684              		.thumb_func
 685              		.fpu softvfp
 687              	HAL_PWREx_EnablePullUpPullDownConfig:
 688              	.LFB183:
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable pull-up and pull-down configuration.
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   When APC bit is set, the I/O pull-up and pull-down configurations defined in
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_PUCRx and PWR_PDCRx registers are applied in Standby and Shutdown modes.
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   Pull-up set by PUy bit of PWR_PUCRx register is not activated if the corresponding
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PDy bit of PWR_PDCRx register is also set (pull-down configuration priority is higher).
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() APIs ensure there
 399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         is no conflict when setting PUy or PDy bit.
 400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePullUpPullDownConfig(void)
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 689              		.loc 1 403 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              		@ link register save eliminated.
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_APC);
ARM GAS  /tmp/ccJiwRGg.s 			page 21


 694              		.loc 1 404 0
 695 0000 034A     		ldr	r2, .L64
 696 0002 9168     		ldr	r1, [r2, #8]
 697 0004 8023     		movs	r3, #128
 698 0006 DB00     		lsls	r3, r3, #3
 699 0008 0B43     		orrs	r3, r1
 700 000a 9360     		str	r3, [r2, #8]
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 701              		.loc 1 405 0
 702              		@ sp needed
 703 000c 7047     		bx	lr
 704              	.L65:
 705 000e C046     		.align	2
 706              	.L64:
 707 0010 00700040 		.word	1073770496
 708              		.cfi_endproc
 709              	.LFE183:
 711              		.section	.text.HAL_PWREx_DisablePullUpPullDownConfig,"ax",%progbits
 712              		.align	1
 713              		.global	HAL_PWREx_DisablePullUpPullDownConfig
 714              		.syntax unified
 715              		.code	16
 716              		.thumb_func
 717              		.fpu softvfp
 719              	HAL_PWREx_DisablePullUpPullDownConfig:
 720              	.LFB184:
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable pull-up and pull-down configuration.
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePullUpPullDownConfig(void)
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 721              		.loc 1 414 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 726              		.loc 1 415 0
 727 0000 024A     		ldr	r2, .L67
 728 0002 9368     		ldr	r3, [r2, #8]
 729 0004 0249     		ldr	r1, .L67+4
 730 0006 0B40     		ands	r3, r1
 731 0008 9360     		str	r3, [r2, #8]
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 732              		.loc 1 416 0
 733              		@ sp needed
 734 000a 7047     		bx	lr
 735              	.L68:
 736              		.align	2
 737              	.L67:
 738 000c 00700040 		.word	1073770496
 739 0010 FFFBFFFF 		.word	-1025
 740              		.cfi_endproc
ARM GAS  /tmp/ccJiwRGg.s 			page 22


 741              	.LFE184:
 743              		.section	.text.HAL_PWREx_EnableSRAMRetention,"ax",%progbits
 744              		.align	1
 745              		.global	HAL_PWREx_EnableSRAMRetention
 746              		.syntax unified
 747              		.code	16
 748              		.thumb_func
 749              		.fpu softvfp
 751              	HAL_PWREx_EnableSRAMRetention:
 752              	.LFB185:
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #if defined(PWR_CR3_RRS)
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Enable SRAM content retention in Standby mode.
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  When RRS bit is set, SRAM is powered by the low-power regulator in
 422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         Standby mode and its content is kept.
 423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnableSRAMRetention(void)
 426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 753              		.loc 1 426 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_RRS);
 758              		.loc 1 427 0
 759 0000 034A     		ldr	r2, .L70
 760 0002 9168     		ldr	r1, [r2, #8]
 761 0004 8023     		movs	r3, #128
 762 0006 5B00     		lsls	r3, r3, #1
 763 0008 0B43     		orrs	r3, r1
 764 000a 9360     		str	r3, [r2, #8]
 428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 765              		.loc 1 428 0
 766              		@ sp needed
 767 000c 7047     		bx	lr
 768              	.L71:
 769 000e C046     		.align	2
 770              	.L70:
 771 0010 00700040 		.word	1073770496
 772              		.cfi_endproc
 773              	.LFE185:
 775              		.section	.text.HAL_PWREx_DisableSRAMRetention,"ax",%progbits
 776              		.align	1
 777              		.global	HAL_PWREx_DisableSRAMRetention
 778              		.syntax unified
 779              		.code	16
 780              		.thumb_func
 781              		.fpu softvfp
 783              	HAL_PWREx_DisableSRAMRetention:
 784              	.LFB186:
 429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Disable SRAM content retention in Standby mode.
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  When RRS bit is reset, SRAM is powered off in Standby mode
ARM GAS  /tmp/ccJiwRGg.s 			page 23


 434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        and its content is lost.
 435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisableSRAMRetention(void)
 438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 785              		.loc 1 438 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 790              		.loc 1 439 0
 791 0000 024A     		ldr	r2, .L73
 792 0002 9368     		ldr	r3, [r2, #8]
 793 0004 0249     		ldr	r1, .L73+4
 794 0006 0B40     		ands	r3, r1
 795 0008 9360     		str	r3, [r2, #8]
 440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 796              		.loc 1 440 0
 797              		@ sp needed
 798 000a 7047     		bx	lr
 799              	.L74:
 800              		.align	2
 801              	.L73:
 802 000c 00700040 		.word	1073770496
 803 0010 FFFEFFFF 		.word	-257
 804              		.cfi_endproc
 805              	.LFE186:
 807              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 808              		.align	1
 809              		.global	HAL_PWREx_EnableFlashPowerDown
 810              		.syntax unified
 811              		.code	16
 812              		.thumb_func
 813              		.fpu softvfp
 815              	HAL_PWREx_EnableFlashPowerDown:
 816              	.LFB187:
 441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #endif
 442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enable Flash Power Down.
 445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   This API allows to enable flash power down capabilities in low power
 446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         run, low power sleep and stop modes.
 447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  PowerMode this can be a combination of following values:
 448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_LPRUN
 449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_LPSLEEP
 450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_STOP
 451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
 454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 817              		.loc 1 454 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 822              	.LVL24:
ARM GAS  /tmp/ccJiwRGg.s 			page 24


 455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_FLASH_POWERDOWN(PowerMode));
 456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   PWR->CR1 |= PowerMode;
 823              		.loc 1 457 0
 824 0000 024A     		ldr	r2, .L76
 825 0002 1368     		ldr	r3, [r2]
 826 0004 1843     		orrs	r0, r3
 827              	.LVL25:
 828 0006 1060     		str	r0, [r2]
 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 829              		.loc 1 458 0
 830              		@ sp needed
 831 0008 7047     		bx	lr
 832              	.L77:
 833 000a C046     		.align	2
 834              	.L76:
 835 000c 00700040 		.word	1073770496
 836              		.cfi_endproc
 837              	.LFE187:
 839              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 840              		.align	1
 841              		.global	HAL_PWREx_DisableFlashPowerDown
 842              		.syntax unified
 843              		.code	16
 844              		.thumb_func
 845              		.fpu softvfp
 847              	HAL_PWREx_DisableFlashPowerDown:
 848              	.LFB188:
 459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Disable Flash Power Down.
 463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   This API allows to disable flash power down capabilities in low power
 464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         run, low power sleep and stop modes.
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  PowerMode this can be a combination of following values:
 466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_LPRUN
 467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_LPSLEEP
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *           @arg @ref PWR_FLASHPD_STOP
 469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown(uint32_t PowerMode)
 472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 849              		.loc 1 472 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 854              	.LVL26:
 473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_FLASH_POWERDOWN(PowerMode));
 474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   PWR->CR1 &= ~PowerMode;
 855              		.loc 1 475 0
 856 0000 024A     		ldr	r2, .L79
 857 0002 1368     		ldr	r3, [r2]
 858 0004 8343     		bics	r3, r0
 859 0006 1360     		str	r3, [r2]
 476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/ccJiwRGg.s 			page 25


 860              		.loc 1 476 0
 861              		@ sp needed
 862 0008 7047     		bx	lr
 863              	.L80:
 864 000a C046     		.align	2
 865              	.L79:
 866 000c 00700040 		.word	1073770496
 867              		.cfi_endproc
 868              	.LFE188:
 870              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 871              		.align	1
 872              		.global	HAL_PWREx_GetVoltageRange
 873              		.syntax unified
 874              		.code	16
 875              		.thumb_func
 876              		.fpu softvfp
 878              	HAL_PWREx_GetVoltageRange:
 879              	.LFB189:
 477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief   Return Voltage Scaling Range.
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval  VOS bit field : PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
 482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange(void)
 484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 880              		.loc 1 484 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_VOS);
 885              		.loc 1 485 0
 886 0000 024B     		ldr	r3, .L82
 887 0002 1868     		ldr	r0, [r3]
 888 0004 C023     		movs	r3, #192
 889 0006 DB00     		lsls	r3, r3, #3
 890 0008 1840     		ands	r0, r3
 486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 891              		.loc 1 486 0
 892              		@ sp needed
 893 000a 7047     		bx	lr
 894              	.L83:
 895              		.align	2
 896              	.L82:
 897 000c 00700040 		.word	1073770496
 898              		.cfi_endproc
 899              	.LFE189:
 901              		.global	__aeabi_uidiv
 902              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 903              		.align	1
 904              		.global	HAL_PWREx_ControlVoltageScaling
 905              		.syntax unified
 906              		.code	16
 907              		.thumb_func
 908              		.fpu softvfp
 910              	HAL_PWREx_ControlVoltageScaling:
ARM GAS  /tmp/ccJiwRGg.s 			page 26


 911              	.LFB190:
 487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Configure the main regulator output voltage.
 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @param  VoltageScaling specifies the regulator output voltage to achieve
 492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         a tradeoff between performance and power consumption.
 493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *          @arg @ref PWR_REGULATOR_VOLTAGE_SCALE1 Regulator voltage output range 1 mode,
 495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.2 V,
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *                                                system frequency up to 64 MHz.
 497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *          @arg @ref PWR_REGULATOR_VOLTAGE_SCALE2 Regulator voltage output range 2 mode,
 498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.0 V,
 499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *                                                system frequency up to 16 MHz.
 500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  When moving from Range 1 to Range 2, the system frequency must be decreased to
 501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        a value below 16 MHz before calling HAL_PWREx_ControlVoltageScaling() API.
 502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        When moving from Range 2 to Range 1, the system frequency can be increased to
 503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        a value up to 64 MHz after calling HAL_PWREx_ControlVoltageScaling() API.
 504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        cleared before returning the status. If the flag is not cleared within
 506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        6 microseconds, HAL_TIMEOUT status is reported.
 507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
 510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 912              		.loc 1 510 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              	.LVL27:
 917 0000 10B5     		push	{r4, lr}
 918              	.LCFI0:
 919              		.cfi_def_cfa_offset 8
 920              		.cfi_offset 4, -8
 921              		.cfi_offset 14, -4
 511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   uint32_t wait_loop_index;
 512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Modify voltage scaling range */
 516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 922              		.loc 1 516 0
 923 0002 104A     		ldr	r2, .L92
 924 0004 1368     		ldr	r3, [r2]
 925 0006 1049     		ldr	r1, .L92+4
 926 0008 0B40     		ands	r3, r1
 927 000a 0343     		orrs	r3, r0
 928 000c 1360     		str	r3, [r2]
 517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
 519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 929              		.loc 1 519 0
 930 000e 8023     		movs	r3, #128
 931 0010 9B00     		lsls	r3, r3, #2
 932 0012 9842     		cmp	r0, r3
 933 0014 01D0     		beq	.L90
 520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccJiwRGg.s 			page 27


 521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     /* Set timeout value */
 522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     /* Wait until VOSF is reset */
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     {
 527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       if(wait_loop_index != 0U)
 528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       {
 529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****         wait_loop_index--;
 530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       }
 531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       else
 532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       {
 533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       }
 535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     }
 536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return HAL_OK;
 934              		.loc 1 538 0
 935 0016 0020     		movs	r0, #0
 936              	.LVL28:
 937              	.L85:
 539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 938              		.loc 1 539 0
 939              		@ sp needed
 940 0018 10BD     		pop	{r4, pc}
 941              	.LVL29:
 942              	.L90:
 522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 943              		.loc 1 522 0
 944 001a 0C4B     		ldr	r3, .L92+8
 945 001c 1A68     		ldr	r2, [r3]
 946 001e 5300     		lsls	r3, r2, #1
 947 0020 9B18     		adds	r3, r3, r2
 948 0022 5800     		lsls	r0, r3, #1
 949              	.LVL30:
 950 0024 0A49     		ldr	r1, .L92+12
 951 0026 FFF7FEFF 		bl	__aeabi_uidiv
 952              	.LVL31:
 953 002a 0130     		adds	r0, r0, #1
 954              	.LVL32:
 955              	.L86:
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     {
 956              		.loc 1 525 0
 957 002c 054B     		ldr	r3, .L92
 958 002e 5B69     		ldr	r3, [r3, #20]
 959 0030 5B05     		lsls	r3, r3, #21
 960 0032 03D5     		bpl	.L91
 527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       {
 961              		.loc 1 527 0
 962 0034 0028     		cmp	r0, #0
 963 0036 03D0     		beq	.L89
 529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       }
 964              		.loc 1 529 0
 965 0038 0138     		subs	r0, r0, #1
 966              	.LVL33:
 967 003a F7E7     		b	.L86
ARM GAS  /tmp/ccJiwRGg.s 			page 28


 968              	.L91:
 538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 969              		.loc 1 538 0
 970 003c 0020     		movs	r0, #0
 971              	.LVL34:
 972 003e EBE7     		b	.L85
 973              	.LVL35:
 974              	.L89:
 533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       }
 975              		.loc 1 533 0
 976 0040 0320     		movs	r0, #3
 977              	.LVL36:
 978 0042 E9E7     		b	.L85
 979              	.L93:
 980              		.align	2
 981              	.L92:
 982 0044 00700040 		.word	1073770496
 983 0048 FFF9FFFF 		.word	-1537
 984 004c 00000000 		.word	SystemCoreClock
 985 0050 40420F00 		.word	1000000
 986              		.cfi_endproc
 987              	.LFE190:
 989              		.section	.text.HAL_PWREx_EnableLowPowerRunMode,"ax",%progbits
 990              		.align	1
 991              		.global	HAL_PWREx_EnableLowPowerRunMode
 992              		.syntax unified
 993              		.code	16
 994              		.thumb_func
 995              		.fpu softvfp
 997              	HAL_PWREx_EnableLowPowerRunMode:
 998              	.LFB191:
 540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Enter Low-power Run mode
 545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  System clock frequency has to be decreased below 2 MHz before entering
 546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        low power run mode
 547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnableLowPowerRunMode(void)
 551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 999              		.loc 1 551 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Set Regulator parameter */
 553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_LPR);
 1004              		.loc 1 553 0
 1005 0000 034A     		ldr	r2, .L95
 1006 0002 1168     		ldr	r1, [r2]
 1007 0004 8023     		movs	r3, #128
 1008 0006 DB01     		lsls	r3, r3, #7
 1009 0008 0B43     		orrs	r3, r1
 1010 000a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccJiwRGg.s 			page 29


 554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 1011              		.loc 1 554 0
 1012              		@ sp needed
 1013 000c 7047     		bx	lr
 1014              	.L96:
 1015 000e C046     		.align	2
 1016              	.L95:
 1017 0010 00700040 		.word	1073770496
 1018              		.cfi_endproc
 1019              	.LFE191:
 1021              		.section	.text.HAL_PWREx_DisableLowPowerRunMode,"ax",%progbits
 1022              		.align	1
 1023              		.global	HAL_PWREx_DisableLowPowerRunMode
 1024              		.syntax unified
 1025              		.code	16
 1026              		.thumb_func
 1027              		.fpu softvfp
 1029              	HAL_PWREx_DisableLowPowerRunMode:
 1030              	.LFB192:
 555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief Exit Low-power Run mode.
 559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note  Before HAL_PWREx_DisableLowPowerRunMode() completion, the function checks that
 560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        REGLPF has been properly reset (otherwise, HAL_PWREx_DisableLowPowerRunMode
 561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        returns HAL_TIMEOUT status). The system clock frequency can then be
 562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *        increased above 2 MHz.
 563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval HAL Status
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
 566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 1031              		.loc 1 566 0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 1035 0000 10B5     		push	{r4, lr}
 1036              	.LCFI1:
 1037              		.cfi_def_cfa_offset 8
 1038              		.cfi_offset 4, -8
 1039              		.cfi_offset 14, -4
 567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 1040              		.loc 1 567 0
 1041 0002 0D4B     		ldr	r3, .L103
 1042 0004 1A68     		ldr	r2, [r3]
 1043 0006 5300     		lsls	r3, r2, #1
 1044 0008 9B18     		adds	r3, r3, r2
 1045 000a 5800     		lsls	r0, r3, #1
 1046 000c 0B49     		ldr	r1, .L103+4
 1047 000e FFF7FEFF 		bl	__aeabi_uidiv
 1048              	.LVL37:
 1049 0012 0130     		adds	r0, r0, #1
 1050              	.LVL38:
 568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Clear LPR bit */
 570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 1051              		.loc 1 570 0
 1052 0014 0A4A     		ldr	r2, .L103+8
ARM GAS  /tmp/ccJiwRGg.s 			page 30


 1053 0016 1368     		ldr	r3, [r2]
 1054 0018 0A49     		ldr	r1, .L103+12
 1055 001a 0B40     		ands	r3, r1
 1056 001c 1360     		str	r3, [r2]
 1057              	.L98:
 571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Wait until REGLPF is reset */
 573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 1058              		.loc 1 573 0
 1059 001e 084B     		ldr	r3, .L103+8
 1060 0020 5B69     		ldr	r3, [r3, #20]
 1061 0022 9B05     		lsls	r3, r3, #22
 1062 0024 03D5     		bpl	.L102
 574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   {
 575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     if(wait_loop_index != 0U)
 1063              		.loc 1 575 0
 1064 0026 0028     		cmp	r0, #0
 1065 0028 03D0     		beq	.L101
 576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     {
 577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       wait_loop_index--;
 1066              		.loc 1 577 0
 1067 002a 0138     		subs	r0, r0, #1
 1068              	.LVL39:
 1069 002c F7E7     		b	.L98
 1070              	.L102:
 578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     }
 579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     else
 580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     {
 581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     }
 583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   }
 584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   return HAL_OK;
 1071              		.loc 1 585 0
 1072 002e 0020     		movs	r0, #0
 1073              	.LVL40:
 1074              	.L99:
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 1075              		.loc 1 586 0
 1076              		@ sp needed
 1077 0030 10BD     		pop	{r4, pc}
 1078              	.LVL41:
 1079              	.L101:
 581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****     }
 1080              		.loc 1 581 0
 1081 0032 0320     		movs	r0, #3
 1082              	.LVL42:
 1083 0034 FCE7     		b	.L99
 1084              	.L104:
 1085 0036 C046     		.align	2
 1086              	.L103:
 1087 0038 00000000 		.word	SystemCoreClock
 1088 003c 40420F00 		.word	1000000
 1089 0040 00700040 		.word	1073770496
 1090 0044 FFBFFFFF 		.word	-16385
 1091              		.cfi_endproc
 1092              	.LFE192:
ARM GAS  /tmp/ccJiwRGg.s 			page 31


 1094              		.section	.text.HAL_PWREx_EnterSHUTDOWNMode,"ax",%progbits
 1095              		.align	1
 1096              		.global	HAL_PWREx_EnterSHUTDOWNMode
 1097              		.syntax unified
 1098              		.code	16
 1099              		.thumb_func
 1100              		.fpu softvfp
 1102              	HAL_PWREx_EnterSHUTDOWNMode:
 1103              	.LFB193:
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #if defined(PWR_SHDW_SUPPORT)
 590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** /**
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @brief  Enter Shutdown mode.
 592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   In Shutdown mode, the PLL, the HSI, the LSI and the HSE oscillators are switched
 593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         off. The voltage regulator is disabled and Vcore domain is powered off.
 594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         SRAM and registers contents are lost except for registers in the Backup domain.
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         The BOR is not available.
 596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @note   The I/Os can be configured either with a pull-up or pull-down or can
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         be kept in analog state.
 598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown()
 599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         respectively enable Pull Up and PullDown state.
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         HAL_PWREx_DisableGPIOPullUp() & HAL_PWREx_DisableGPIOPullDown()
 601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         disable the same. These states are effective in Standby mode only if
 602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   * @retval None
 606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   */
 607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSHUTDOWNMode(void)
 608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** {
 1104              		.loc 1 608 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Set Shutdown mode */
 610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 1109              		.loc 1 610 0
 1110 0000 064A     		ldr	r2, .L106
 1111 0002 1368     		ldr	r3, [r2]
 1112 0004 0721     		movs	r1, #7
 1113 0006 8B43     		bics	r3, r1
 1114 0008 0339     		subs	r1, r1, #3
 1115 000a 0B43     		orrs	r3, r1
 1116 000c 1360     		str	r3, [r2]
 611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1117              		.loc 1 613 0
 1118 000e 044A     		ldr	r2, .L106+4
 1119 0010 1369     		ldr	r3, [r2, #16]
 1120 0012 0B43     		orrs	r3, r1
 1121 0014 1361     		str	r3, [r2, #16]
 614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* This option is used to ensure that store operations are completed */
 616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #if defined ( __CC_ARM)
ARM GAS  /tmp/ccJiwRGg.s 			page 32


 617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   __force_stores();
 618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** #endif
 619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** 
 620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   /* Request Wait For Interrupt */
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c ****   __WFI();
 1122              		.loc 1 621 0
 1123              		.syntax divided
 1124              	@ 621 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c" 1
 1125 0016 30BF     		wfi
 1126              	@ 0 "" 2
 622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c **** }
 1127              		.loc 1 622 0
 1128              		.thumb
 1129              		.syntax unified
 1130              		@ sp needed
 1131 0018 7047     		bx	lr
 1132              	.L107:
 1133 001a C046     		.align	2
 1134              	.L106:
 1135 001c 00700040 		.word	1073770496
 1136 0020 00ED00E0 		.word	-536810240
 1137              		.cfi_endproc
 1138              	.LFE193:
 1140              		.text
 1141              	.Letext0:
 1142              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1143              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1144              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 1145              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 1146              		.file 6 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 1147              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 1148              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 1149              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
ARM GAS  /tmp/ccJiwRGg.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 stm32g0xx_hal_pwr_ex.c
     /tmp/ccJiwRGg.s:16     .text.HAL_PWREx_EnableBatteryCharging:00000000 $t
     /tmp/ccJiwRGg.s:23     .text.HAL_PWREx_EnableBatteryCharging:00000000 HAL_PWREx_EnableBatteryCharging
     /tmp/ccJiwRGg.s:52     .text.HAL_PWREx_EnableBatteryCharging:00000014 $d
     /tmp/ccJiwRGg.s:58     .text.HAL_PWREx_DisableBatteryCharging:00000000 $t
     /tmp/ccJiwRGg.s:65     .text.HAL_PWREx_DisableBatteryCharging:00000000 HAL_PWREx_DisableBatteryCharging
     /tmp/ccJiwRGg.s:84     .text.HAL_PWREx_DisableBatteryCharging:0000000c $d
     /tmp/ccJiwRGg.s:90     .text.HAL_PWREx_EnablePORMonitorSampling:00000000 $t
     /tmp/ccJiwRGg.s:97     .text.HAL_PWREx_EnablePORMonitorSampling:00000000 HAL_PWREx_EnablePORMonitorSampling
     /tmp/ccJiwRGg.s:117    .text.HAL_PWREx_EnablePORMonitorSampling:00000010 $d
     /tmp/ccJiwRGg.s:122    .text.HAL_PWREx_DisablePORMonitorSampling:00000000 $t
     /tmp/ccJiwRGg.s:129    .text.HAL_PWREx_DisablePORMonitorSampling:00000000 HAL_PWREx_DisablePORMonitorSampling
     /tmp/ccJiwRGg.s:148    .text.HAL_PWREx_DisablePORMonitorSampling:0000000c $d
     /tmp/ccJiwRGg.s:154    .text.HAL_PWREx_EnableInternalWakeUpLine:00000000 $t
     /tmp/ccJiwRGg.s:161    .text.HAL_PWREx_EnableInternalWakeUpLine:00000000 HAL_PWREx_EnableInternalWakeUpLine
     /tmp/ccJiwRGg.s:181    .text.HAL_PWREx_EnableInternalWakeUpLine:00000010 $d
     /tmp/ccJiwRGg.s:186    .text.HAL_PWREx_DisableInternalWakeUpLine:00000000 $t
     /tmp/ccJiwRGg.s:193    .text.HAL_PWREx_DisableInternalWakeUpLine:00000000 HAL_PWREx_DisableInternalWakeUpLine
     /tmp/ccJiwRGg.s:212    .text.HAL_PWREx_DisableInternalWakeUpLine:0000000c $d
     /tmp/ccJiwRGg.s:218    .text.HAL_PWREx_EnableGPIOPullUp:00000000 $t
     /tmp/ccJiwRGg.s:225    .text.HAL_PWREx_EnableGPIOPullUp:00000000 HAL_PWREx_EnableGPIOPullUp
     /tmp/ccJiwRGg.s:242    .rodata.HAL_PWREx_EnableGPIOPullUp:00000000 $d
     /tmp/ccJiwRGg.s:337    .text.HAL_PWREx_EnableGPIOPullUp:00000074 $d
     /tmp/ccJiwRGg.s:345    .text.HAL_PWREx_DisableGPIOPullUp:00000000 $t
     /tmp/ccJiwRGg.s:352    .text.HAL_PWREx_DisableGPIOPullUp:00000000 HAL_PWREx_DisableGPIOPullUp
     /tmp/ccJiwRGg.s:369    .rodata.HAL_PWREx_DisableGPIOPullUp:00000000 $d
     /tmp/ccJiwRGg.s:442    .text.HAL_PWREx_DisableGPIOPullUp:00000050 $d
     /tmp/ccJiwRGg.s:449    .text.HAL_PWREx_EnableGPIOPullDown:00000000 $t
     /tmp/ccJiwRGg.s:456    .text.HAL_PWREx_EnableGPIOPullDown:00000000 HAL_PWREx_EnableGPIOPullDown
     /tmp/ccJiwRGg.s:473    .rodata.HAL_PWREx_EnableGPIOPullDown:00000000 $d
     /tmp/ccJiwRGg.s:568    .text.HAL_PWREx_EnableGPIOPullDown:00000074 $d
     /tmp/ccJiwRGg.s:576    .text.HAL_PWREx_DisableGPIOPullDown:00000000 $t
     /tmp/ccJiwRGg.s:583    .text.HAL_PWREx_DisableGPIOPullDown:00000000 HAL_PWREx_DisableGPIOPullDown
     /tmp/ccJiwRGg.s:600    .rodata.HAL_PWREx_DisableGPIOPullDown:00000000 $d
     /tmp/ccJiwRGg.s:673    .text.HAL_PWREx_DisableGPIOPullDown:00000050 $d
     /tmp/ccJiwRGg.s:680    .text.HAL_PWREx_EnablePullUpPullDownConfig:00000000 $t
     /tmp/ccJiwRGg.s:687    .text.HAL_PWREx_EnablePullUpPullDownConfig:00000000 HAL_PWREx_EnablePullUpPullDownConfig
     /tmp/ccJiwRGg.s:707    .text.HAL_PWREx_EnablePullUpPullDownConfig:00000010 $d
     /tmp/ccJiwRGg.s:712    .text.HAL_PWREx_DisablePullUpPullDownConfig:00000000 $t
     /tmp/ccJiwRGg.s:719    .text.HAL_PWREx_DisablePullUpPullDownConfig:00000000 HAL_PWREx_DisablePullUpPullDownConfig
     /tmp/ccJiwRGg.s:738    .text.HAL_PWREx_DisablePullUpPullDownConfig:0000000c $d
     /tmp/ccJiwRGg.s:744    .text.HAL_PWREx_EnableSRAMRetention:00000000 $t
     /tmp/ccJiwRGg.s:751    .text.HAL_PWREx_EnableSRAMRetention:00000000 HAL_PWREx_EnableSRAMRetention
     /tmp/ccJiwRGg.s:771    .text.HAL_PWREx_EnableSRAMRetention:00000010 $d
     /tmp/ccJiwRGg.s:776    .text.HAL_PWREx_DisableSRAMRetention:00000000 $t
     /tmp/ccJiwRGg.s:783    .text.HAL_PWREx_DisableSRAMRetention:00000000 HAL_PWREx_DisableSRAMRetention
     /tmp/ccJiwRGg.s:802    .text.HAL_PWREx_DisableSRAMRetention:0000000c $d
     /tmp/ccJiwRGg.s:808    .text.HAL_PWREx_EnableFlashPowerDown:00000000 $t
     /tmp/ccJiwRGg.s:815    .text.HAL_PWREx_EnableFlashPowerDown:00000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccJiwRGg.s:835    .text.HAL_PWREx_EnableFlashPowerDown:0000000c $d
     /tmp/ccJiwRGg.s:840    .text.HAL_PWREx_DisableFlashPowerDown:00000000 $t
     /tmp/ccJiwRGg.s:847    .text.HAL_PWREx_DisableFlashPowerDown:00000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/ccJiwRGg.s:866    .text.HAL_PWREx_DisableFlashPowerDown:0000000c $d
     /tmp/ccJiwRGg.s:871    .text.HAL_PWREx_GetVoltageRange:00000000 $t
     /tmp/ccJiwRGg.s:878    .text.HAL_PWREx_GetVoltageRange:00000000 HAL_PWREx_GetVoltageRange
     /tmp/ccJiwRGg.s:897    .text.HAL_PWREx_GetVoltageRange:0000000c $d
ARM GAS  /tmp/ccJiwRGg.s 			page 34


     /tmp/ccJiwRGg.s:903    .text.HAL_PWREx_ControlVoltageScaling:00000000 $t
     /tmp/ccJiwRGg.s:910    .text.HAL_PWREx_ControlVoltageScaling:00000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccJiwRGg.s:982    .text.HAL_PWREx_ControlVoltageScaling:00000044 $d
     /tmp/ccJiwRGg.s:990    .text.HAL_PWREx_EnableLowPowerRunMode:00000000 $t
     /tmp/ccJiwRGg.s:997    .text.HAL_PWREx_EnableLowPowerRunMode:00000000 HAL_PWREx_EnableLowPowerRunMode
     /tmp/ccJiwRGg.s:1017   .text.HAL_PWREx_EnableLowPowerRunMode:00000010 $d
     /tmp/ccJiwRGg.s:1022   .text.HAL_PWREx_DisableLowPowerRunMode:00000000 $t
     /tmp/ccJiwRGg.s:1029   .text.HAL_PWREx_DisableLowPowerRunMode:00000000 HAL_PWREx_DisableLowPowerRunMode
     /tmp/ccJiwRGg.s:1087   .text.HAL_PWREx_DisableLowPowerRunMode:00000038 $d
     /tmp/ccJiwRGg.s:1095   .text.HAL_PWREx_EnterSHUTDOWNMode:00000000 $t
     /tmp/ccJiwRGg.s:1102   .text.HAL_PWREx_EnterSHUTDOWNMode:00000000 HAL_PWREx_EnterSHUTDOWNMode
     /tmp/ccJiwRGg.s:1135   .text.HAL_PWREx_EnterSHUTDOWNMode:0000001c $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
