ARM GAS  /tmp/cc2m6qQd.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"Filter.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Filter,"ax",%progbits
  16              		.align	1
  17              		.global	Filter
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Filter:
  24              	.LFB284:
  25              		.file 1 "Src/Filter.c"
   1:Src/Filter.c  **** #include "usart.h"
   2:Src/Filter.c  **** #include <stdio.h>
   3:Src/Filter.c  **** #include "state.h"
   4:Src/Filter.c  **** #include "usart_utils.h"
   5:Src/Filter.c  **** #include "ADC.h"
   6:Src/Filter.c  **** #include "spi.h"
   7:Src/Filter.c  **** #include "DAC.h"
   8:Src/Filter.c  **** extern state State;
   9:Src/Filter.c  **** 
  10:Src/Filter.c  **** void Filter() //Simple moving average filter for all 16 adc channels
  11:Src/Filter.c  **** {
  26              		.loc 1 11 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 168
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 ABB0     		sub	sp, sp, #172
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 192
  12:Src/Filter.c  ****     State.ADC_Updated = 0;  //reset flag
  41              		.loc 1 12 0
  42 0004 784B     		ldr	r3, .L19
  43 0006 0022     		movs	r2, #0
  44 0008 5A72     		strb	r2, [r3, #9]
  13:Src/Filter.c  ****     uint32_t acc[16] = {0}; //Accumulator for moving average
  45              		.loc 1 13 0
ARM GAS  /tmp/cc2m6qQd.s 			page 2


  46 000a 4032     		adds	r2, r2, #64
  47 000c 0021     		movs	r1, #0
  48 000e 1AA8     		add	r0, sp, #104
  49 0010 FFF7FEFF 		bl	memset
  50              	.LVL0:
  51              	.LBB2:
  14:Src/Filter.c  **** 
  15:Src/Filter.c  ****     //FilterFifo:
  16:Src/Filter.c  ****     for (int y = FilterLength - 1; y > 0; y--) // enumerate through buffer
  52              		.loc 1 16 0
  53 0014 0F24     		movs	r4, #15
  54 0016 18E0     		b	.L2
  55              	.LVL1:
  56              	.L3:
  57              	.LBB3:
  17:Src/Filter.c  ****     {
  18:Src/Filter.c  ****         for (int x = 0; x < 16; x++) // enumerate through values
  19:Src/Filter.c  ****         {
  20:Src/Filter.c  ****             State.ADC_ValuesBuffer[y][x] = State.ADC_ValuesBuffer[y - 1][x]; //move by +1 index
  58              		.loc 1 20 0 discriminator 3
  59 0018 631E     		subs	r3, r4, #1
  60 001a 7348     		ldr	r0, .L19
  61 001c 1B01     		lsls	r3, r3, #4
  62 001e 5B18     		adds	r3, r3, r1
  63 0020 1233     		adds	r3, r3, #18
  64 0022 9B00     		lsls	r3, r3, #2
  65 0024 C318     		adds	r3, r0, r3
  66 0026 2201     		lsls	r2, r4, #4
  67 0028 5218     		adds	r2, r2, r1
  68 002a 1232     		adds	r2, r2, #18
  69 002c 9200     		lsls	r2, r2, #2
  70 002e 8218     		adds	r2, r0, r2
  71 0030 5868     		ldr	r0, [r3, #4]
  72 0032 5060     		str	r0, [r2, #4]
  21:Src/Filter.c  ****             acc[x] = acc[x] + State.ADC_ValuesBuffer[y - 1][x];              //accumulate
  73              		.loc 1 21 0 discriminator 3
  74 0034 1AAA     		add	r2, sp, #104
  75 0036 8800     		lsls	r0, r1, #2
  76 0038 5B68     		ldr	r3, [r3, #4]
  77 003a 8558     		ldr	r5, [r0, r2]
  78 003c AC46     		mov	ip, r5
  79 003e 6344     		add	r3, r3, ip
  80 0040 8350     		str	r3, [r0, r2]
  18:Src/Filter.c  ****         {
  81              		.loc 1 18 0 discriminator 3
  82 0042 0131     		adds	r1, r1, #1
  83              	.LVL2:
  84              	.L4:
  18:Src/Filter.c  ****         {
  85              		.loc 1 18 0 is_stmt 0 discriminator 1
  86 0044 0F29     		cmp	r1, #15
  87 0046 E7DD     		ble	.L3
  88              	.LBE3:
  16:Src/Filter.c  ****     {
  89              		.loc 1 16 0 is_stmt 1 discriminator 2
  90 0048 013C     		subs	r4, r4, #1
  91              	.LVL3:
ARM GAS  /tmp/cc2m6qQd.s 			page 3


  92              	.L2:
  16:Src/Filter.c  ****     {
  93              		.loc 1 16 0 is_stmt 0 discriminator 1
  94 004a 002C     		cmp	r4, #0
  95 004c 01DD     		ble	.L14
  96              	.LBB4:
  18:Src/Filter.c  ****         {
  97              		.loc 1 18 0 is_stmt 1
  98 004e 0021     		movs	r1, #0
  99 0050 F8E7     		b	.L4
 100              	.L14:
 101              	.LBE4:
 102              	.LBE2:
 103              	.LBB5:
  22:Src/Filter.c  ****         }
  23:Src/Filter.c  ****     }
  24:Src/Filter.c  ****     for (int x = 0; x < 16; x++) // enumerate through new values
 104              		.loc 1 24 0
 105 0052 0022     		movs	r2, #0
 106              	.LVL4:
 107              	.L5:
 108              		.loc 1 24 0 is_stmt 0 discriminator 1
 109 0054 0F2A     		cmp	r2, #15
 110 0056 18DC     		bgt	.L15
  25:Src/Filter.c  ****     {
  26:Src/Filter.c  ****         State.ADC_ValuesBuffer[0][x] = State.ADC_Values[x];  //Insert new values to the front of th
 111              		.loc 1 26 0 is_stmt 1 discriminator 3
 112 0058 6349     		ldr	r1, .L19
 113 005a 931C     		adds	r3, r2, #2
 114 005c 9B00     		lsls	r3, r3, #2
 115 005e CB18     		adds	r3, r1, r3
 116 0060 5B68     		ldr	r3, [r3, #4]
 117 0062 1000     		movs	r0, r2
 118 0064 1230     		adds	r0, r0, #18
 119 0066 8000     		lsls	r0, r0, #2
 120 0068 0818     		adds	r0, r1, r0
 121 006a 4360     		str	r3, [r0, #4]
  27:Src/Filter.c  ****         acc[x] = (acc[x] + State.ADC_Values[x]);             //accumulate new value
 122              		.loc 1 27 0 discriminator 3
 123 006c 1AA8     		add	r0, sp, #104
 124 006e 9400     		lsls	r4, r2, #2
 125 0070 2558     		ldr	r5, [r4, r0]
 126 0072 AC46     		mov	ip, r5
 127 0074 6344     		add	r3, r3, ip
 128 0076 2350     		str	r3, [r4, r0]
  28:Src/Filter.c  ****         State.ADC_ValuesFiltered[x] = acc[x] / FilterLength; //calculate average
 129              		.loc 1 28 0 discriminator 3
 130 0078 1B09     		lsrs	r3, r3, #4
 131 007a 1000     		movs	r0, r2
 132 007c 1330     		adds	r0, r0, #19
 133 007e FF30     		adds	r0, r0, #255
 134 0080 8000     		lsls	r0, r0, #2
 135 0082 0918     		adds	r1, r1, r0
 136 0084 4B60     		str	r3, [r1, #4]
  24:Src/Filter.c  ****     {
 137              		.loc 1 24 0 discriminator 3
 138 0086 0132     		adds	r2, r2, #1
ARM GAS  /tmp/cc2m6qQd.s 			page 4


 139              	.LVL5:
 140 0088 E4E7     		b	.L5
 141              	.L15:
 142              	.LBE5:
  29:Src/Filter.c  ****     }
  30:Src/Filter.c  **** 
  31:Src/Filter.c  ****     State.ADC_Filter_Iteration++;                                       //count filter passes to kn
 143              		.loc 1 31 0
 144 008a 5749     		ldr	r1, .L19
 145 008c 574A     		ldr	r2, .L19+4
 146              	.LVL6:
 147 008e 8B5C     		ldrb	r3, [r1, r2]
 148 0090 0133     		adds	r3, r3, #1
 149 0092 DBB2     		uxtb	r3, r3
 150 0094 8B54     		strb	r3, [r1, r2]
  32:Src/Filter.c  ****     State.ADC_Filter_Valid = State.ADC_Filter_Iteration > FilterLength; //when data is not corrupte
 151              		.loc 1 32 0
 152 0096 1022     		movs	r2, #16
 153 0098 9A42     		cmp	r2, r3
 154 009a 9B41     		sbcs	r3, r3, r3
 155 009c 5B42     		rsbs	r3, r3, #0
 156 009e 544A     		ldr	r2, .L19+8
 157 00a0 8B54     		strb	r3, [r1, r2]
 158              	.LBB6:
  33:Src/Filter.c  **** 
  34:Src/Filter.c  ****     //Output:                                                 //Uncomment to test
  35:Src/Filter.c  ****     SERIAL_WRITE("Filtered:\n");                              //
 159              		.loc 1 35 0
 160 00a2 01AC     		add	r4, sp, #4
 161 00a4 5A22     		movs	r2, #90
 162 00a6 0021     		movs	r1, #0
 163 00a8 0E20     		movs	r0, #14
 164 00aa 6844     		add	r0, r0, sp
 165 00ac FFF7FEFF 		bl	memset
 166              	.LVL7:
 167 00b0 504B     		ldr	r3, .L19+12
 168 00b2 2200     		movs	r2, r4
 169 00b4 03CB     		ldmia	r3!, {r0, r1}
 170 00b6 03C2     		stmia	r2!, {r0, r1}
 171 00b8 1900     		movs	r1, r3
 172 00ba 1B88     		ldrh	r3, [r3]
 173 00bc 1380     		strh	r3, [r2]
 174 00be 8B78     		ldrb	r3, [r1, #2]
 175 00c0 9370     		strb	r3, [r2, #2]
 176              	.LVL8:
 177 00c2 FA23     		movs	r3, #250
 178 00c4 9B00     		lsls	r3, r3, #2
 179 00c6 0A22     		movs	r2, #10
 180 00c8 2100     		movs	r1, r4
 181 00ca 4B48     		ldr	r0, .L19+16
 182 00cc FFF7FEFF 		bl	HAL_UART_Transmit
 183              	.LVL9:
 184              	.LBE6:
 185              	.LBB7:
  36:Src/Filter.c  ****     for (int x = 0; x < 16; x++)                              //
 186              		.loc 1 36 0
 187 00d0 0024     		movs	r4, #0
ARM GAS  /tmp/cc2m6qQd.s 			page 5


 188              	.LVL10:
 189              	.L7:
 190              		.loc 1 36 0 is_stmt 0 discriminator 1
 191 00d2 0F2C     		cmp	r4, #15
 192 00d4 18DC     		bgt	.L16
 193              	.LBB8:
  37:Src/Filter.c  ****     {                                                         //
  38:Src/Filter.c  ****         SERIAL_WRITE("%u\t", State.ADC_ValuesFiltered[x])     //
 194              		.loc 1 38 0 is_stmt 1 discriminator 3
 195 00d6 6422     		movs	r2, #100
 196 00d8 0021     		movs	r1, #0
 197 00da 01A8     		add	r0, sp, #4
 198 00dc FFF7FEFF 		bl	memset
 199              	.LVL11:
 200 00e0 2200     		movs	r2, r4
 201 00e2 1332     		adds	r2, r2, #19
 202 00e4 FF32     		adds	r2, r2, #255
 203 00e6 9200     		lsls	r2, r2, #2
 204 00e8 3F4B     		ldr	r3, .L19
 205 00ea 9B18     		adds	r3, r3, r2
 206 00ec 5A68     		ldr	r2, [r3, #4]
 207 00ee 4349     		ldr	r1, .L19+20
 208 00f0 01A8     		add	r0, sp, #4
 209 00f2 FFF7FEFF 		bl	sprintf
 210              	.LVL12:
 211 00f6 FA23     		movs	r3, #250
 212 00f8 82B2     		uxth	r2, r0
 213 00fa 9B00     		lsls	r3, r3, #2
 214 00fc 01A9     		add	r1, sp, #4
 215 00fe 3E48     		ldr	r0, .L19+16
 216              	.LVL13:
 217 0100 FFF7FEFF 		bl	HAL_UART_Transmit
 218              	.LVL14:
 219              	.LBE8:
  36:Src/Filter.c  ****     for (int x = 0; x < 16; x++)                              //
 220              		.loc 1 36 0 discriminator 3
 221 0104 0134     		adds	r4, r4, #1
 222              	.LVL15:
 223 0106 E4E7     		b	.L7
 224              	.L16:
 225              	.LBE7:
 226              	.LBB9:
  39:Src/Filter.c  ****     }                                                         //
  40:Src/Filter.c  ****     SERIAL_WRITE("\nRaw:\n");                                 //
 227              		.loc 1 40 0
 228 0108 01AC     		add	r4, sp, #4
 229              	.LVL16:
 230 010a 5E22     		movs	r2, #94
 231 010c 0021     		movs	r1, #0
 232 010e 0A20     		movs	r0, #10
 233 0110 6844     		add	r0, r0, sp
 234 0112 FFF7FEFF 		bl	memset
 235              	.LVL17:
 236 0116 3A4B     		ldr	r3, .L19+24
 237 0118 1A68     		ldr	r2, [r3]
 238 011a 0192     		str	r2, [sp, #4]
 239 011c 9A88     		ldrh	r2, [r3, #4]
ARM GAS  /tmp/cc2m6qQd.s 			page 6


 240 011e A280     		strh	r2, [r4, #4]
 241 0120 9B79     		ldrb	r3, [r3, #6]
 242 0122 A371     		strb	r3, [r4, #6]
 243              	.LVL18:
 244 0124 FA23     		movs	r3, #250
 245 0126 9B00     		lsls	r3, r3, #2
 246 0128 0622     		movs	r2, #6
 247 012a 2100     		movs	r1, r4
 248 012c 3248     		ldr	r0, .L19+16
 249 012e FFF7FEFF 		bl	HAL_UART_Transmit
 250              	.LVL19:
 251              	.LBE9:
 252              	.LBB10:
  41:Src/Filter.c  ****     for (int x = 0; x < 16; x++)                              //
 253              		.loc 1 41 0
 254 0132 0024     		movs	r4, #0
 255              	.LVL20:
 256              	.L9:
 257              		.loc 1 41 0 is_stmt 0 discriminator 1
 258 0134 0F2C     		cmp	r4, #15
 259 0136 16DC     		bgt	.L17
 260              	.LBB11:
  42:Src/Filter.c  ****     {                                                         //
  43:Src/Filter.c  ****         SERIAL_WRITE("%u\t", State.ADC_Values[x])             //
 261              		.loc 1 43 0 is_stmt 1 discriminator 3
 262 0138 6422     		movs	r2, #100
 263 013a 0021     		movs	r1, #0
 264 013c 01A8     		add	r0, sp, #4
 265 013e FFF7FEFF 		bl	memset
 266              	.LVL21:
 267 0142 A21C     		adds	r2, r4, #2
 268 0144 9200     		lsls	r2, r2, #2
 269 0146 284B     		ldr	r3, .L19
 270 0148 9B18     		adds	r3, r3, r2
 271 014a 5A68     		ldr	r2, [r3, #4]
 272 014c 2B49     		ldr	r1, .L19+20
 273 014e 01A8     		add	r0, sp, #4
 274 0150 FFF7FEFF 		bl	sprintf
 275              	.LVL22:
 276 0154 FA23     		movs	r3, #250
 277 0156 82B2     		uxth	r2, r0
 278 0158 9B00     		lsls	r3, r3, #2
 279 015a 01A9     		add	r1, sp, #4
 280 015c 2648     		ldr	r0, .L19+16
 281              	.LVL23:
 282 015e FFF7FEFF 		bl	HAL_UART_Transmit
 283              	.LVL24:
 284              	.LBE11:
  41:Src/Filter.c  ****     for (int x = 0; x < 16; x++)                              //
 285              		.loc 1 41 0 discriminator 3
 286 0162 0134     		adds	r4, r4, #1
 287              	.LVL25:
 288 0164 E6E7     		b	.L9
 289              	.L17:
 290              	.LBE10:
  44:Src/Filter.c  ****     }                                                         //
  45:Src/Filter.c  ****     if (State.ADC_Filter_Valid)                               //
ARM GAS  /tmp/cc2m6qQd.s 			page 7


 291              		.loc 1 45 0
 292 0166 204A     		ldr	r2, .L19
 293 0168 214B     		ldr	r3, .L19+8
 294 016a D35C     		ldrb	r3, [r2, r3]
 295 016c 002B     		cmp	r3, #0
 296 016e 1AD1     		bne	.L18
 297              	.LBB12:
  46:Src/Filter.c  ****     {                                                         //
  47:Src/Filter.c  ****         SERIAL_WRITE("\n");                                   //
  48:Src/Filter.c  ****         SERIAL_WRITE("\n");                                   //
  49:Src/Filter.c  ****     }                                                         //
  50:Src/Filter.c  ****     else                                                      //
  51:Src/Filter.c  ****     {                                                         //
  52:Src/Filter.c  ****         SERIAL_WRITE("\nFilter contains initial zeros!\n\n"); //
 298              		.loc 1 52 0 discriminator 2
 299 0170 01AC     		add	r4, sp, #4
 300              	.LVL26:
 301 0172 4222     		movs	r2, #66
 302 0174 0021     		movs	r1, #0
 303 0176 2620     		movs	r0, #38
 304 0178 6844     		add	r0, r0, sp
 305 017a FFF7FEFF 		bl	memset
 306              	.LVL27:
 307 017e 2149     		ldr	r1, .L19+28
 308 0180 2300     		movs	r3, r4
 309 0182 0A00     		movs	r2, r1
 310 0184 23CA     		ldmia	r2!, {r0, r1, r5}
 311 0186 23C3     		stmia	r3!, {r0, r1, r5}
 312 0188 23CA     		ldmia	r2!, {r0, r1, r5}
 313 018a 23C3     		stmia	r3!, {r0, r1, r5}
 314 018c 03CA     		ldmia	r2!, {r0, r1}
 315 018e 03C3     		stmia	r3!, {r0, r1}
 316 0190 1288     		ldrh	r2, [r2]
 317 0192 1A80     		strh	r2, [r3]
 318              	.LVL28:
 319 0194 FA23     		movs	r3, #250
 320 0196 9B00     		lsls	r3, r3, #2
 321 0198 2122     		movs	r2, #33
 322 019a 2100     		movs	r1, r4
 323 019c 1648     		ldr	r0, .L19+16
 324 019e FFF7FEFF 		bl	HAL_UART_Transmit
 325              	.LVL29:
 326              	.L1:
 327              	.LBE12:
  53:Src/Filter.c  ****     }                                                         //
  54:Src/Filter.c  **** }
 328              		.loc 1 54 0
 329 01a2 2BB0     		add	sp, sp, #172
 330              		@ sp needed
 331 01a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 332              	.LVL30:
 333              	.L18:
 334              	.LBB13:
  47:Src/Filter.c  ****         SERIAL_WRITE("\n");                                   //
 335              		.loc 1 47 0
 336 01a6 01AC     		add	r4, sp, #4
 337              	.LVL31:
ARM GAS  /tmp/cc2m6qQd.s 			page 8


 338 01a8 6222     		movs	r2, #98
 339 01aa 0021     		movs	r1, #0
 340 01ac 6B46     		mov	r3, sp
 341 01ae 981D     		adds	r0, r3, #6
 342 01b0 FFF7FEFF 		bl	memset
 343              	.LVL32:
 344 01b4 0A27     		movs	r7, #10
 345 01b6 2780     		strh	r7, [r4]
 346              	.LVL33:
 347 01b8 FA26     		movs	r6, #250
 348 01ba B600     		lsls	r6, r6, #2
 349 01bc 0E4D     		ldr	r5, .L19+16
 350 01be 3300     		movs	r3, r6
 351 01c0 0122     		movs	r2, #1
 352 01c2 2100     		movs	r1, r4
 353 01c4 2800     		movs	r0, r5
 354 01c6 FFF7FEFF 		bl	HAL_UART_Transmit
 355              	.LVL34:
 356              	.LBE13:
 357              	.LBB14:
  48:Src/Filter.c  ****     }                                                         //
 358              		.loc 1 48 0
 359 01ca 6222     		movs	r2, #98
 360 01cc 0021     		movs	r1, #0
 361 01ce 6B46     		mov	r3, sp
 362 01d0 981D     		adds	r0, r3, #6
 363 01d2 FFF7FEFF 		bl	memset
 364              	.LVL35:
 365 01d6 2780     		strh	r7, [r4]
 366              	.LVL36:
 367 01d8 3300     		movs	r3, r6
 368 01da 0122     		movs	r2, #1
 369 01dc 2100     		movs	r1, r4
 370 01de 2800     		movs	r0, r5
 371 01e0 FFF7FEFF 		bl	HAL_UART_Transmit
 372              	.LVL37:
 373              	.LBE14:
 374 01e4 DDE7     		b	.L1
 375              	.L20:
 376 01e6 C046     		.align	2
 377              	.L19:
 378 01e8 00000000 		.word	State
 379 01ec 8C040000 		.word	1164
 380 01f0 8D040000 		.word	1165
 381 01f4 00000000 		.word	.LC1
 382 01f8 00000000 		.word	huart2
 383 01fc 0C000000 		.word	.LC4
 384 0200 10000000 		.word	.LC6
 385 0204 18000000 		.word	.LC8
 386              		.cfi_endproc
 387              	.LFE284:
 389              		.section	.rodata.Filter.str1.4,"aMS",%progbits,1
 390              		.align	2
 391              	.LC1:
 392 0000 46696C74 		.ascii	"Filtered:\012\000"
 392      65726564 
 392      3A0A00
ARM GAS  /tmp/cc2m6qQd.s 			page 9


 393 000b 00       		.space	1
 394              	.LC4:
 395 000c 25750900 		.ascii	"%u\011\000"
 396              	.LC6:
 397 0010 0A526177 		.ascii	"\012Raw:\012\000"
 397      3A0A00
 398 0017 00       		.space	1
 399              	.LC8:
 400 0018 0A46696C 		.ascii	"\012Filter contains initial zeros!\012\012\000"
 400      74657220 
 400      636F6E74 
 400      61696E73 
 400      20696E69 
 401              		.text
 402              	.Letext0:
 403              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 404              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 405              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 406              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 407              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 408              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 409              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 410              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_spi.h"
 411              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 412              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 413              		.file 12 "/usr/include/newlib/sys/lock.h"
 414              		.file 13 "/usr/include/newlib/sys/_types.h"
 415              		.file 14 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 416              		.file 15 "/usr/include/newlib/sys/reent.h"
 417              		.file 16 "Inc/usart.h"
 418              		.file 17 "Inc/state.h"
 419              		.file 18 "Inc/spi.h"
 420              		.file 19 "/usr/include/newlib/stdio.h"
 421              		.file 20 "<built-in>"
ARM GAS  /tmp/cc2m6qQd.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 Filter.c
     /tmp/cc2m6qQd.s:16     .text.Filter:00000000 $t
     /tmp/cc2m6qQd.s:23     .text.Filter:00000000 Filter
     /tmp/cc2m6qQd.s:378    .text.Filter:000001e8 $d
     /tmp/cc2m6qQd.s:390    .rodata.Filter.str1.4:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_UART_Transmit
sprintf
State
huart2
