ARM GAS  /tmp/ccgUGT8D.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	Error_Handler
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Error_Handler:
  24              	.LFB286:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    **** 	******************************************************************************
   4:Src/main.c    **** 	* @file           : main.c
   5:Src/main.c    **** 	* @brief          : Main program body
   6:Src/main.c    **** 	******************************************************************************
   7:Src/main.c    **** 	* @attention
   8:Src/main.c    **** 	*
   9:Src/main.c    **** 	* <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    **** 	* All rights reserved.</center></h2>
  11:Src/main.c    **** 	*
  12:Src/main.c    **** 	* This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    **** 	* the "License"; You may not use this file except in compliance with the
  14:Src/main.c    **** 	* License. You may obtain a copy of the License at:
  15:Src/main.c    **** 	*                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    **** 	*
  17:Src/main.c    **** 	******************************************************************************
  18:Src/main.c    **** 	*/
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "dma.h"
  24:Src/main.c    **** #include "lptim.h"
  25:Src/main.c    **** #include "spi.h"
  26:Src/main.c    **** #include "usart.h"
  27:Src/main.c    **** #include "gpio.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN Includes */
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "DAC.h"
  33:Src/main.c    **** #include "state.h"
ARM GAS  /tmp/ccgUGT8D.s 			page 2


  34:Src/main.c    **** #include "usart_utils.h"
  35:Src/main.c    **** #include "cmd.h"
  36:Src/main.c    **** #include "Filter.h"
  37:Src/main.c    **** /* USER CODE END Includes */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PTD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PTD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PD */
  46:Src/main.c    **** /* USER CODE END PD */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  49:Src/main.c    **** /* USER CODE BEGIN PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END PM */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** state State = {0};
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** /* USER CODE BEGIN PFP */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END PFP */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END 0 */
  69:Src/main.c    **** 
  70:Src/main.c    **** /**
  71:Src/main.c    ****   * @brief  The application entry point.
  72:Src/main.c    ****   * @retval int
  73:Src/main.c    ****   */
  74:Src/main.c    **** int main(void)
  75:Src/main.c    **** {
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE END 1 */
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Src/main.c    ****   HAL_Init();
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE BEGIN Init */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE END Init */
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* Configure the system clock */
  90:Src/main.c    ****   SystemClock_Config();
ARM GAS  /tmp/ccgUGT8D.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  93:Src/main.c    ****   /* USER CODE END SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Initialize all configured peripherals */
  96:Src/main.c    ****   MX_GPIO_Init();
  97:Src/main.c    ****   MX_DMA_Init();
  98:Src/main.c    ****   MX_LPTIM1_Init();
  99:Src/main.c    ****   MX_USART2_UART_Init();
 100:Src/main.c    ****   MX_SPI2_Init();
 101:Src/main.c    ****   MX_SPI1_Init();
 102:Src/main.c    ****   /* USER CODE BEGIN 2 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   HAL_LPTIM_MspInit(&hlptim1);
 105:Src/main.c    ****   HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_PRESCALER_1s_LSI);
 106:Src/main.c    ****   HAL_SPI_MspInit(&hspi2);
 107:Src/main.c    ****   HAL_SPI_MspInit(&hspi1);
 108:Src/main.c    **** 
 109:Src/main.c    ****   SERIAL_WRITE(RESET);
 110:Src/main.c    **** 
 111:Src/main.c    ****   ADC_reset();
 112:Src/main.c    ****   ADC_config();
 113:Src/main.c    ****   HAL_UART_Receive_DMA(&huart2, State.UART_RX_BUFF, UART_RX_BUFFER_LENGTH);
 114:Src/main.c    **** 
 115:Src/main.c    ****   DAC_reset();
 116:Src/main.c    **** 
 117:Src/main.c    ****   //PRIORITY OVERRIDES:
 118:Src/main.c    ****   HAL_InitTick(0);
 119:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 120:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 121:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 122:Src/main.c    ****   HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 123:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END 2 */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Infinite loop */
 128:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 129:Src/main.c    ****   DAC_cmd(RF_PS_704_OFFSET + DAC_WRITE + 0xfffa);
 130:Src/main.c    ****   ADC_update();
 131:Src/main.c    ****   PID_Init();
 132:Src/main.c    ****   Calib();
 133:Src/main.c    **** 
 134:Src/main.c    ****     // ADC_DATA_READY_EXTI_deInit();
 135:Src/main.c    ****     // HAL_SPI_MspInit(&hspi2);
 136:Src/main.c    ****     // ADC_CMD(ADC_WRITE, ADC_FILTCONx_REG(0));
 137:Src/main.c    ****     // ADC_SPI_WRITE_16(ADC_SPS_16);
 138:Src/main.c    ****     // HAL_SPI_MspDeInit(&hspi2);
 139:Src/main.c    ****     // ADC_DATA_READY_EXTI_Init();
 140:Src/main.c    ****   uint32_t counter = 0;
 141:Src/main.c    ****   while (1)
 142:Src/main.c    ****   {
 143:Src/main.c    ****     if (State.cmd)
 144:Src/main.c    ****     {
 145:Src/main.c    ****       cmd();
 146:Src/main.c    ****     };
 147:Src/main.c    ****     if (State.ADC_Updated)
ARM GAS  /tmp/ccgUGT8D.s 			page 4


 148:Src/main.c    ****     { 
 149:Src/main.c    ****       counter++;
 150:Src/main.c    ****       Filter();      
 151:Src/main.c    ****       PID();
 152:Src/main.c    ****       if(counter%10 == 1){
 153:Src/main.c    ****         SERIAL_WRITE("\n\n")
 154:Src/main.c    ****         SERIAL_WRITE("PD1 %i\n",State.PD1_Slope);
 155:Src/main.c    ****         SERIAL_WRITE("PD2 %i\n",State.PD2_Slope);
 156:Src/main.c    ****         SERIAL_WRITE("PD3 %i\n",State.PD3_Slope);
 157:Src/main.c    ****         SERIAL_WRITE("PD4 %i\n",State.PD4_Slope);
 158:Src/main.c    ****         SERIAL_WRITE("PID_352_P_error %i\n",State.PID_352_P_error);
 159:Src/main.c    ****         SERIAL_WRITE("PID_704_P_error %i\n",State.PID_704_P_error);
 160:Src/main.c    ****   
 161:Src/main.c    ****         // SERIAL_WRITE("PD0 Phase:\t\t");
 162:Src/main.c    ****         // SERIAL_WRITE("%3i.", Phase(ADC_PD0_Phase_CH) / 1000);
 163:Src/main.c    ****         // SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD0_Phase_CH) % 1000);
 164:Src/main.c    ****         SERIAL_WRITE("PD1+PD2 SETPOINT: %li\n",State.PD1_PD2_SetPoint);
 165:Src/main.c    ****              SERIAL_WRITE("PID 704 Output: %li\n",State.PID_704_Output);
 166:Src/main.c    ****         SERIAL_WRITE("PD1 Phase:\t\t");
 167:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD1_Phase_CH) / 1000);
 168:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD1_Phase_CH) % 1000);
 169:Src/main.c    **** 
 170:Src/main.c    ****         SERIAL_WRITE("PD2 Phase:\t\t");
 171:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD2_Phase_CH) / 1000);
 172:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD2_Phase_CH) % 1000);
 173:Src/main.c    **** 
 174:Src/main.c    ****         SERIAL_WRITE("PD3+PD4 SETPOINT: %li\n",State.PD3_PD4_SetPoint);
 175:Src/main.c    ****         SERIAL_WRITE("PID 352 Output: %li\n",State.PID_352_Output);
 176:Src/main.c    ****    
 177:Src/main.c    ****         SERIAL_WRITE("PD3 Phase:\t\t");
 178:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD3_Phase_CH) / 1000);
 179:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD3_Phase_CH) % 1000);
 180:Src/main.c    **** 
 181:Src/main.c    ****         SERIAL_WRITE("PD4 Phase:\t\t");
 182:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD4_Phase_CH) / 1000);
 183:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD4_Phase_CH) % 1000);
 184:Src/main.c    ****       }
 185:Src/main.c    ****     };
 186:Src/main.c    ****     /* USER CODE END WHILE */
 187:Src/main.c    **** 
 188:Src/main.c    ****     /* USER CODE BEGIN 3 */
 189:Src/main.c    ****   }
 190:Src/main.c    ****   /* USER CODE END 3 */
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /**
 194:Src/main.c    ****   * @brief System Clock Configuration
 195:Src/main.c    ****   * @retval None
 196:Src/main.c    ****   */
 197:Src/main.c    **** void SystemClock_Config(void)
 198:Src/main.c    **** {
 199:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 200:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 201:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 202:Src/main.c    **** 
 203:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 204:Src/main.c    ****   */
ARM GAS  /tmp/ccgUGT8D.s 			page 5


 205:Src/main.c    ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 206:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 207:Src/main.c    ****   */
 208:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 209:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 210:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 211:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 212:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 214:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 215:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 220:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 225:Src/main.c    ****   */
 226:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 227:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 228:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 229:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 230:Src/main.c    **** 
 231:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 232:Src/main.c    ****   {
 233:Src/main.c    ****     Error_Handler();
 234:Src/main.c    ****   }
 235:Src/main.c    ****   /** Initializes the peripherals clocks 
 236:Src/main.c    ****   */
 237:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPTIM1;
 238:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 239:Src/main.c    ****   PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 240:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** /* USER CODE BEGIN 4 */
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USER CODE END 4 */
 249:Src/main.c    **** 
 250:Src/main.c    **** /**
 251:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 252:Src/main.c    ****   * @retval None
 253:Src/main.c    ****   */
 254:Src/main.c    **** void Error_Handler(void)
 255:Src/main.c    **** {
  26              		.loc 1 255 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
ARM GAS  /tmp/ccgUGT8D.s 			page 6


  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35              	.LVL0:
  36              	.LBB2:
 256:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 257:Src/main.c    ****   for (int i = 0; i < 10; i++)
  37              		.loc 1 257 0
  38 0002 0024     		movs	r4, #0
  39 0004 08E0     		b	.L2
  40              	.LVL1:
  41              	.L3:
 258:Src/main.c    ****   {
 259:Src/main.c    ****     HAL_GPIO_TogglePin(LED_PHASE_GPIO_Port, LED_PHASE_Pin);
  42              		.loc 1 259 0 discriminator 3
  43 0006 A020     		movs	r0, #160
  44 0008 0121     		movs	r1, #1
  45 000a C005     		lsls	r0, r0, #23
  46 000c FFF7FEFF 		bl	HAL_GPIO_TogglePin
  47              	.LVL2:
 260:Src/main.c    ****     HAL_Delay(100);
  48              		.loc 1 260 0 discriminator 3
  49 0010 6420     		movs	r0, #100
  50 0012 FFF7FEFF 		bl	HAL_Delay
  51              	.LVL3:
 257:Src/main.c    ****   {
  52              		.loc 1 257 0 discriminator 3
  53 0016 0134     		adds	r4, r4, #1
  54              	.LVL4:
  55              	.L2:
 257:Src/main.c    ****   {
  56              		.loc 1 257 0 is_stmt 0 discriminator 1
  57 0018 092C     		cmp	r4, #9
  58 001a F4DD     		ble	.L3
  59              	.LBE2:
 261:Src/main.c    ****   }
 262:Src/main.c    ****   HAL_GPIO_WritePin(LED_PHASE_GPIO_Port, LED_PHASE_Pin, 0);
  60              		.loc 1 262 0 is_stmt 1
  61 001c A020     		movs	r0, #160
  62 001e 0022     		movs	r2, #0
  63 0020 0121     		movs	r1, #1
  64 0022 C005     		lsls	r0, r0, #23
  65 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
  66              	.LVL5:
 263:Src/main.c    **** 
 264:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 267:Src/main.c    **** }
  67              		.loc 1 267 0
  68              		@ sp needed
  69              	.LVL6:
  70 0028 10BD     		pop	{r4, pc}
  71              		.cfi_endproc
  72              	.LFE286:
  74              		.section	.text.SystemClock_Config,"ax",%progbits
  75              		.align	1
ARM GAS  /tmp/ccgUGT8D.s 			page 7


  76              		.global	SystemClock_Config
  77              		.syntax unified
  78              		.code	16
  79              		.thumb_func
  80              		.fpu softvfp
  82              	SystemClock_Config:
  83              	.LFB285:
 198:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  84              		.loc 1 198 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 128
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88 0000 00B5     		push	{lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 4
  91              		.cfi_offset 14, -4
  92 0002 A1B0     		sub	sp, sp, #132
  93              	.LCFI2:
  94              		.cfi_def_cfa_offset 136
 199:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  95              		.loc 1 199 0
  96 0004 3822     		movs	r2, #56
  97 0006 0021     		movs	r1, #0
  98 0008 12A8     		add	r0, sp, #72
  99 000a FFF7FEFF 		bl	memset
 100              	.LVL7:
 200:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 101              		.loc 1 200 0
 102 000e 1022     		movs	r2, #16
 103 0010 0021     		movs	r1, #0
 104 0012 0EA8     		add	r0, sp, #56
 105 0014 FFF7FEFF 		bl	memset
 106              	.LVL8:
 201:Src/main.c    **** 
 107              		.loc 1 201 0
 108 0018 3422     		movs	r2, #52
 109 001a 0021     		movs	r1, #0
 110 001c 01A8     		add	r0, sp, #4
 111 001e FFF7FEFF 		bl	memset
 112              	.LVL9:
 205:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 113              		.loc 1 205 0
 114 0022 8020     		movs	r0, #128
 115 0024 8000     		lsls	r0, r0, #2
 116 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 117              	.LVL10:
 208:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 118              		.loc 1 208 0
 119 002a 0A23     		movs	r3, #10
 120 002c 1293     		str	r3, [sp, #72]
 209:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 121              		.loc 1 209 0
 122 002e F633     		adds	r3, r3, #246
 123 0030 1593     		str	r3, [sp, #84]
 210:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 124              		.loc 1 210 0
 125 0032 0023     		movs	r3, #0
ARM GAS  /tmp/ccgUGT8D.s 			page 8


 126 0034 1693     		str	r3, [sp, #88]
 211:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 127              		.loc 1 211 0
 128 0036 4022     		movs	r2, #64
 129 0038 1792     		str	r2, [sp, #92]
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 130              		.loc 1 212 0
 131 003a 3F3A     		subs	r2, r2, #63
 132 003c 1892     		str	r2, [sp, #96]
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 133              		.loc 1 213 0
 134 003e 0132     		adds	r2, r2, #1
 135 0040 1992     		str	r2, [sp, #100]
 214:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 136              		.loc 1 214 0
 137 0042 1A92     		str	r2, [sp, #104]
 215:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 138              		.loc 1 215 0
 139 0044 1B93     		str	r3, [sp, #108]
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 140              		.loc 1 216 0
 141 0046 0833     		adds	r3, r3, #8
 142 0048 1C93     		str	r3, [sp, #112]
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 143              		.loc 1 217 0
 144 004a 8023     		movs	r3, #128
 145 004c 9B02     		lsls	r3, r3, #10
 146 004e 1D93     		str	r3, [sp, #116]
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 147              		.loc 1 218 0
 148 0050 8023     		movs	r3, #128
 149 0052 9B04     		lsls	r3, r3, #18
 150 0054 1E93     		str	r3, [sp, #120]
 219:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 151              		.loc 1 219 0
 152 0056 8023     		movs	r3, #128
 153 0058 9B05     		lsls	r3, r3, #22
 154 005a 1F93     		str	r3, [sp, #124]
 220:Src/main.c    ****   {
 155              		.loc 1 220 0
 156 005c 12A8     		add	r0, sp, #72
 157 005e FFF7FEFF 		bl	HAL_RCC_OscConfig
 158              	.LVL11:
 159 0062 0028     		cmp	r0, #0
 160 0064 1AD1     		bne	.L8
 161              	.L5:
 226:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 162              		.loc 1 226 0
 163 0066 0723     		movs	r3, #7
 164 0068 0E93     		str	r3, [sp, #56]
 227:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 165              		.loc 1 227 0
 166 006a 053B     		subs	r3, r3, #5
 167 006c 0F93     		str	r3, [sp, #60]
 228:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 168              		.loc 1 228 0
 169 006e 0023     		movs	r3, #0
ARM GAS  /tmp/ccgUGT8D.s 			page 9


 170 0070 1093     		str	r3, [sp, #64]
 229:Src/main.c    **** 
 171              		.loc 1 229 0
 172 0072 1193     		str	r3, [sp, #68]
 231:Src/main.c    ****   {
 173              		.loc 1 231 0
 174 0074 0221     		movs	r1, #2
 175 0076 0EA8     		add	r0, sp, #56
 176 0078 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 177              	.LVL12:
 178 007c 0028     		cmp	r0, #0
 179 007e 10D1     		bne	.L9
 180              	.L6:
 237:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 181              		.loc 1 237 0
 182 0080 0B4B     		ldr	r3, .L11
 183 0082 0193     		str	r3, [sp, #4]
 238:Src/main.c    ****   PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 184              		.loc 1 238 0
 185 0084 0023     		movs	r3, #0
 186 0086 0393     		str	r3, [sp, #12]
 239:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 187              		.loc 1 239 0
 188 0088 8023     		movs	r3, #128
 189 008a DB02     		lsls	r3, r3, #11
 190 008c 0793     		str	r3, [sp, #28]
 240:Src/main.c    ****   {
 191              		.loc 1 240 0
 192 008e 01A8     		add	r0, sp, #4
 193 0090 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 194              	.LVL13:
 195 0094 0028     		cmp	r0, #0
 196 0096 07D1     		bne	.L10
 197              	.L4:
 244:Src/main.c    **** 
 198              		.loc 1 244 0
 199 0098 21B0     		add	sp, sp, #132
 200              		@ sp needed
 201 009a 00BD     		pop	{pc}
 202              	.L8:
 222:Src/main.c    ****   }
 203              		.loc 1 222 0
 204 009c FFF7FEFF 		bl	Error_Handler
 205              	.LVL14:
 206 00a0 E1E7     		b	.L5
 207              	.L9:
 233:Src/main.c    ****   }
 208              		.loc 1 233 0
 209 00a2 FFF7FEFF 		bl	Error_Handler
 210              	.LVL15:
 211 00a6 EBE7     		b	.L6
 212              	.L10:
 242:Src/main.c    ****   }
 213              		.loc 1 242 0
 214 00a8 FFF7FEFF 		bl	Error_Handler
 215              	.LVL16:
 244:Src/main.c    **** 
ARM GAS  /tmp/ccgUGT8D.s 			page 10


 216              		.loc 1 244 0
 217 00ac F4E7     		b	.L4
 218              	.L12:
 219 00ae C046     		.align	2
 220              	.L11:
 221 00b0 02020000 		.word	514
 222              		.cfi_endproc
 223              	.LFE285:
 225              		.global	__aeabi_uidivmod
 226              		.global	__aeabi_idiv
 227              		.global	__aeabi_idivmod
 228              		.section	.text.main,"ax",%progbits
 229              		.align	1
 230              		.global	main
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 234              		.fpu softvfp
 236              	main:
 237              	.LFB284:
  75:Src/main.c    ****   /* USER CODE BEGIN 1 */
 238              		.loc 1 75 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 104
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 243              	.LCFI3:
 244              		.cfi_def_cfa_offset 20
 245              		.cfi_offset 4, -20
 246              		.cfi_offset 5, -16
 247              		.cfi_offset 6, -12
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 C646     		mov	lr, r8
 251 0004 00B5     		push	{lr}
 252              	.LCFI4:
 253              		.cfi_def_cfa_offset 24
 254              		.cfi_offset 8, -24
 255 0006 9AB0     		sub	sp, sp, #104
 256              	.LCFI5:
 257              		.cfi_def_cfa_offset 128
  83:Src/main.c    **** 
 258              		.loc 1 83 0
 259 0008 FFF7FEFF 		bl	HAL_Init
 260              	.LVL17:
  90:Src/main.c    **** 
 261              		.loc 1 90 0
 262 000c FFF7FEFF 		bl	SystemClock_Config
 263              	.LVL18:
  96:Src/main.c    ****   MX_DMA_Init();
 264              		.loc 1 96 0
 265 0010 FFF7FEFF 		bl	MX_GPIO_Init
 266              	.LVL19:
  97:Src/main.c    ****   MX_LPTIM1_Init();
 267              		.loc 1 97 0
 268 0014 FFF7FEFF 		bl	MX_DMA_Init
 269              	.LVL20:
ARM GAS  /tmp/ccgUGT8D.s 			page 11


  98:Src/main.c    ****   MX_USART2_UART_Init();
 270              		.loc 1 98 0
 271 0018 FFF7FEFF 		bl	MX_LPTIM1_Init
 272              	.LVL21:
  99:Src/main.c    ****   MX_SPI2_Init();
 273              		.loc 1 99 0
 274 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 275              	.LVL22:
 100:Src/main.c    ****   MX_SPI1_Init();
 276              		.loc 1 100 0
 277 0020 FFF7FEFF 		bl	MX_SPI2_Init
 278              	.LVL23:
 101:Src/main.c    ****   /* USER CODE BEGIN 2 */
 279              		.loc 1 101 0
 280 0024 FFF7FEFF 		bl	MX_SPI1_Init
 281              	.LVL24:
 104:Src/main.c    ****   HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_PRESCALER_1s_LSI);
 282              		.loc 1 104 0
 283 0028 324C     		ldr	r4, .L19
 284 002a 2000     		movs	r0, r4
 285 002c FFF7FEFF 		bl	HAL_LPTIM_MspInit
 286              	.LVL25:
 105:Src/main.c    ****   HAL_SPI_MspInit(&hspi2);
 287              		.loc 1 105 0
 288 0030 FA21     		movs	r1, #250
 289 0032 2000     		movs	r0, r4
 290 0034 FFF7FEFF 		bl	HAL_LPTIM_Counter_Start_IT
 291              	.LVL26:
 106:Src/main.c    ****   HAL_SPI_MspInit(&hspi1);
 292              		.loc 1 106 0
 293 0038 2F48     		ldr	r0, .L19+4
 294 003a FFF7FEFF 		bl	HAL_SPI_MspInit
 295              	.LVL27:
 107:Src/main.c    **** 
 296              		.loc 1 107 0
 297 003e 2F48     		ldr	r0, .L19+8
 298 0040 FFF7FEFF 		bl	HAL_SPI_MspInit
 299              	.LVL28:
 300              	.LBB3:
 109:Src/main.c    **** 
 301              		.loc 1 109 0
 302 0044 01AC     		add	r4, sp, #4
 303 0046 4A22     		movs	r2, #74
 304 0048 0021     		movs	r1, #0
 305 004a 1E20     		movs	r0, #30
 306 004c 6844     		add	r0, r0, sp
 307 004e FFF7FEFF 		bl	memset
 308              	.LVL29:
 309 0052 2B49     		ldr	r1, .L19+12
 310 0054 2300     		movs	r3, r4
 311 0056 0A00     		movs	r2, r1
 312 0058 23CA     		ldmia	r2!, {r0, r1, r5}
 313 005a 23C3     		stmia	r3!, {r0, r1, r5}
 314 005c 23CA     		ldmia	r2!, {r0, r1, r5}
 315 005e 23C3     		stmia	r3!, {r0, r1, r5}
 316 0060 1288     		ldrh	r2, [r2]
 317 0062 1A80     		strh	r2, [r3]
ARM GAS  /tmp/ccgUGT8D.s 			page 12


 318              	.LVL30:
 319 0064 FA23     		movs	r3, #250
 320 0066 274D     		ldr	r5, .L19+16
 321 0068 9B00     		lsls	r3, r3, #2
 322 006a 1922     		movs	r2, #25
 323 006c 2100     		movs	r1, r4
 324 006e 2800     		movs	r0, r5
 325 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 326              	.LVL31:
 327              	.LBE3:
 111:Src/main.c    ****   ADC_config();
 328              		.loc 1 111 0
 329 0074 FFF7FEFF 		bl	ADC_reset
 330              	.LVL32:
 112:Src/main.c    ****   HAL_UART_Receive_DMA(&huart2, State.UART_RX_BUFF, UART_RX_BUFFER_LENGTH);
 331              		.loc 1 112 0
 332 0078 FFF7FEFF 		bl	ADC_config
 333              	.LVL33:
 113:Src/main.c    **** 
 334              		.loc 1 113 0
 335 007c 4022     		movs	r2, #64
 336 007e 2249     		ldr	r1, .L19+20
 337 0080 2800     		movs	r0, r5
 338 0082 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 339              	.LVL34:
 115:Src/main.c    **** 
 340              		.loc 1 115 0
 341 0086 FFF7FEFF 		bl	DAC_reset
 342              	.LVL35:
 118:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 343              		.loc 1 118 0
 344 008a 0020     		movs	r0, #0
 345 008c FFF7FEFF 		bl	HAL_InitTick
 346              	.LVL36:
 119:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 347              		.loc 1 119 0
 348 0090 0022     		movs	r2, #0
 349 0092 0121     		movs	r1, #1
 350 0094 0720     		movs	r0, #7
 351 0096 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 352              	.LVL37:
 120:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 353              		.loc 1 120 0
 354 009a 0022     		movs	r2, #0
 355 009c 0221     		movs	r1, #2
 356 009e 0920     		movs	r0, #9
 357 00a0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 358              	.LVL38:
 121:Src/main.c    ****   HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 359              		.loc 1 121 0
 360 00a4 0022     		movs	r2, #0
 361 00a6 0221     		movs	r1, #2
 362 00a8 1120     		movs	r0, #17
 363 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 364              	.LVL39:
 122:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 365              		.loc 1 122 0
ARM GAS  /tmp/ccgUGT8D.s 			page 13


 366 00ae 0022     		movs	r2, #0
 367 00b0 0221     		movs	r1, #2
 368 00b2 1A20     		movs	r0, #26
 369 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 370              	.LVL40:
 123:Src/main.c    **** 
 371              		.loc 1 123 0
 372 00b8 0022     		movs	r2, #0
 373 00ba 0221     		movs	r1, #2
 374 00bc 1C20     		movs	r0, #28
 375 00be FFF7FEFF 		bl	HAL_NVIC_SetPriority
 376              	.LVL41:
 129:Src/main.c    ****   ADC_update();
 377              		.loc 1 129 0
 378 00c2 1248     		ldr	r0, .L19+24
 379 00c4 FFF7FEFF 		bl	DAC_cmd
 380              	.LVL42:
 130:Src/main.c    ****   PID_Init();
 381              		.loc 1 130 0
 382 00c8 FFF7FEFF 		bl	ADC_update
 383              	.LVL43:
 131:Src/main.c    ****   Calib();
 384              		.loc 1 131 0
 385 00cc FFF7FEFF 		bl	PID_Init
 386              	.LVL44:
 132:Src/main.c    **** 
 387              		.loc 1 132 0
 388 00d0 FFF7FEFF 		bl	Calib
 389              	.LVL45:
 140:Src/main.c    ****   while (1)
 390              		.loc 1 140 0
 391 00d4 0023     		movs	r3, #0
 392 00d6 9846     		mov	r8, r3
 393 00d8 04E0     		b	.L16
 394              	.LVL46:
 395              	.L15:
 147:Src/main.c    ****     { 
 396              		.loc 1 147 0
 397 00da 0D4A     		ldr	r2, .L19+28
 398 00dc 4B23     		movs	r3, #75
 399 00de D35C     		ldrb	r3, [r2, r3]
 400 00e0 002B     		cmp	r3, #0
 401 00e2 17D1     		bne	.L18
 402              	.LVL47:
 403              	.L16:
 143:Src/main.c    ****     {
 404              		.loc 1 143 0
 405 00e4 0A4B     		ldr	r3, .L19+28
 406 00e6 5B7A     		ldrb	r3, [r3, #9]
 407 00e8 002B     		cmp	r3, #0
 408 00ea F6D0     		beq	.L15
 145:Src/main.c    ****     };
 409              		.loc 1 145 0
 410 00ec FFF7FEFF 		bl	cmd
 411              	.LVL48:
 412 00f0 F3E7     		b	.L15
 413              	.L20:
ARM GAS  /tmp/ccgUGT8D.s 			page 14


 414 00f2 C046     		.align	2
 415              	.L19:
 416 00f4 00000000 		.word	hlptim1
 417 00f8 00000000 		.word	hspi2
 418 00fc 00000000 		.word	hspi1
 419 0100 00000000 		.word	.LC3
 420 0104 00000000 		.word	huart2
 421 0108 0A000000 		.word	State+10
 422 010c FAFF1600 		.word	1507322
 423 0110 00000000 		.word	State
 424              	.L18:
 425              	.LBB4:
 149:Src/main.c    ****       Filter();      
 426              		.loc 1 149 0
 427 0114 0123     		movs	r3, #1
 428 0116 9C46     		mov	ip, r3
 429 0118 E044     		add	r8, r8, ip
 430              	.LVL49:
 150:Src/main.c    ****       PID();
 431              		.loc 1 150 0
 432 011a FFF7FEFF 		bl	Filter
 433              	.LVL50:
 151:Src/main.c    ****       if(counter%10 == 1){
 434              		.loc 1 151 0
 435 011e FFF7FEFF 		bl	PID
 436              	.LVL51:
 152:Src/main.c    ****         SERIAL_WRITE("\n\n")
 437              		.loc 1 152 0
 438 0122 0A21     		movs	r1, #10
 439 0124 4046     		mov	r0, r8
 440 0126 FFF7FEFF 		bl	__aeabi_uidivmod
 441              	.LVL52:
 442 012a 0129     		cmp	r1, #1
 443 012c DAD1     		bne	.L16
 444              	.LBB5:
 153:Src/main.c    ****         SERIAL_WRITE("PD1 %i\n",State.PD1_Slope);
 445              		.loc 1 153 0
 446 012e 01AC     		add	r4, sp, #4
 447 0130 6222     		movs	r2, #98
 448 0132 0021     		movs	r1, #0
 449 0134 6B46     		mov	r3, sp
 450 0136 981D     		adds	r0, r3, #6
 451 0138 FFF7FEFF 		bl	memset
 452              	.LVL53:
 453 013c EF4B     		ldr	r3, .L21
 454 013e 1A88     		ldrh	r2, [r3]
 455 0140 2280     		strh	r2, [r4]
 456 0142 9B78     		ldrb	r3, [r3, #2]
 457 0144 A370     		strb	r3, [r4, #2]
 458              	.LVL54:
 459 0146 FA23     		movs	r3, #250
 460 0148 9B00     		lsls	r3, r3, #2
 461 014a 0222     		movs	r2, #2
 462 014c 2100     		movs	r1, r4
 463 014e EC48     		ldr	r0, .L21+4
 464 0150 FFF7FEFF 		bl	HAL_UART_Transmit
 465              	.LVL55:
ARM GAS  /tmp/ccgUGT8D.s 			page 15


 466              	.LBE5:
 467              	.LBB6:
 154:Src/main.c    ****         SERIAL_WRITE("PD2 %i\n",State.PD2_Slope);
 468              		.loc 1 154 0
 469 0154 6422     		movs	r2, #100
 470 0156 0021     		movs	r1, #0
 471 0158 2000     		movs	r0, r4
 472 015a FFF7FEFF 		bl	memset
 473              	.LVL56:
 474 015e E94D     		ldr	r5, .L21+8
 475 0160 8723     		movs	r3, #135
 476 0162 5B00     		lsls	r3, r3, #1
 477 0164 EA56     		ldrsb	r2, [r5, r3]
 478 0166 E849     		ldr	r1, .L21+12
 479 0168 2000     		movs	r0, r4
 480 016a FFF7FEFF 		bl	sprintf
 481              	.LVL57:
 482 016e 82B2     		uxth	r2, r0
 483 0170 FA23     		movs	r3, #250
 484 0172 9B00     		lsls	r3, r3, #2
 485 0174 2100     		movs	r1, r4
 486 0176 E248     		ldr	r0, .L21+4
 487              	.LVL58:
 488 0178 FFF7FEFF 		bl	HAL_UART_Transmit
 489              	.LVL59:
 490              	.LBE6:
 491              	.LBB7:
 155:Src/main.c    ****         SERIAL_WRITE("PD3 %i\n",State.PD3_Slope);
 492              		.loc 1 155 0
 493 017c 6422     		movs	r2, #100
 494 017e 0021     		movs	r1, #0
 495 0180 2000     		movs	r0, r4
 496 0182 FFF7FEFF 		bl	memset
 497              	.LVL60:
 498 0186 1023     		movs	r3, #16
 499 0188 FF33     		adds	r3, r3, #255
 500 018a EA56     		ldrsb	r2, [r5, r3]
 501 018c DF49     		ldr	r1, .L21+16
 502 018e 2000     		movs	r0, r4
 503 0190 FFF7FEFF 		bl	sprintf
 504              	.LVL61:
 505 0194 82B2     		uxth	r2, r0
 506 0196 FA23     		movs	r3, #250
 507 0198 9B00     		lsls	r3, r3, #2
 508 019a 2100     		movs	r1, r4
 509 019c D848     		ldr	r0, .L21+4
 510              	.LVL62:
 511 019e FFF7FEFF 		bl	HAL_UART_Transmit
 512              	.LVL63:
 513              	.LBE7:
 514              	.LBB8:
 156:Src/main.c    ****         SERIAL_WRITE("PD4 %i\n",State.PD4_Slope);
 515              		.loc 1 156 0
 516 01a2 6422     		movs	r2, #100
 517 01a4 0021     		movs	r1, #0
 518 01a6 2000     		movs	r0, r4
 519 01a8 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccgUGT8D.s 			page 16


 520              	.LVL64:
 521 01ac 8823     		movs	r3, #136
 522 01ae 5B00     		lsls	r3, r3, #1
 523 01b0 EA56     		ldrsb	r2, [r5, r3]
 524 01b2 D749     		ldr	r1, .L21+20
 525 01b4 2000     		movs	r0, r4
 526 01b6 FFF7FEFF 		bl	sprintf
 527              	.LVL65:
 528 01ba 82B2     		uxth	r2, r0
 529 01bc FA23     		movs	r3, #250
 530 01be 9B00     		lsls	r3, r3, #2
 531 01c0 2100     		movs	r1, r4
 532 01c2 CF48     		ldr	r0, .L21+4
 533              	.LVL66:
 534 01c4 FFF7FEFF 		bl	HAL_UART_Transmit
 535              	.LVL67:
 536              	.LBE8:
 537              	.LBB9:
 157:Src/main.c    ****         SERIAL_WRITE("PID_352_P_error %i\n",State.PID_352_P_error);
 538              		.loc 1 157 0
 539 01c8 6422     		movs	r2, #100
 540 01ca 0021     		movs	r1, #0
 541 01cc 2000     		movs	r0, r4
 542 01ce FFF7FEFF 		bl	memset
 543              	.LVL68:
 544 01d2 1223     		movs	r3, #18
 545 01d4 FF33     		adds	r3, r3, #255
 546 01d6 EA56     		ldrsb	r2, [r5, r3]
 547 01d8 CE49     		ldr	r1, .L21+24
 548 01da 2000     		movs	r0, r4
 549 01dc FFF7FEFF 		bl	sprintf
 550              	.LVL69:
 551 01e0 82B2     		uxth	r2, r0
 552 01e2 FA23     		movs	r3, #250
 553 01e4 9B00     		lsls	r3, r3, #2
 554 01e6 2100     		movs	r1, r4
 555 01e8 C548     		ldr	r0, .L21+4
 556              	.LVL70:
 557 01ea FFF7FEFF 		bl	HAL_UART_Transmit
 558              	.LVL71:
 559              	.LBE9:
 560              	.LBB10:
 158:Src/main.c    ****         SERIAL_WRITE("PID_704_P_error %i\n",State.PID_704_P_error);
 561              		.loc 1 158 0
 562 01ee 6422     		movs	r2, #100
 563 01f0 0021     		movs	r1, #0
 564 01f2 2000     		movs	r0, r4
 565 01f4 FFF7FEFF 		bl	memset
 566              	.LVL72:
 567 01f8 2B00     		movs	r3, r5
 568 01fa 6933     		adds	r3, r3, #105
 569 01fc FF33     		adds	r3, r3, #255
 570 01fe 1A68     		ldr	r2, [r3]
 571 0200 5B68     		ldr	r3, [r3, #4]
 572 0202 C549     		ldr	r1, .L21+28
 573 0204 2000     		movs	r0, r4
 574 0206 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccgUGT8D.s 			page 17


 575              	.LVL73:
 576 020a 82B2     		uxth	r2, r0
 577 020c FA23     		movs	r3, #250
 578 020e 9B00     		lsls	r3, r3, #2
 579 0210 2100     		movs	r1, r4
 580 0212 BB48     		ldr	r0, .L21+4
 581              	.LVL74:
 582 0214 FFF7FEFF 		bl	HAL_UART_Transmit
 583              	.LVL75:
 584              	.LBE10:
 585              	.LBB11:
 159:Src/main.c    ****   
 586              		.loc 1 159 0
 587 0218 6422     		movs	r2, #100
 588 021a 0021     		movs	r1, #0
 589 021c 2000     		movs	r0, r4
 590 021e FFF7FEFF 		bl	memset
 591              	.LVL76:
 592 0222 2B00     		movs	r3, r5
 593 0224 9933     		adds	r3, r3, #153
 594 0226 FF33     		adds	r3, r3, #255
 595 0228 1A68     		ldr	r2, [r3]
 596 022a 5B68     		ldr	r3, [r3, #4]
 597 022c BB49     		ldr	r1, .L21+32
 598 022e 2000     		movs	r0, r4
 599 0230 FFF7FEFF 		bl	sprintf
 600              	.LVL77:
 601 0234 82B2     		uxth	r2, r0
 602 0236 FA23     		movs	r3, #250
 603 0238 9B00     		lsls	r3, r3, #2
 604 023a 2100     		movs	r1, r4
 605 023c B048     		ldr	r0, .L21+4
 606              	.LVL78:
 607 023e FFF7FEFF 		bl	HAL_UART_Transmit
 608              	.LVL79:
 609              	.LBE11:
 610              	.LBB12:
 164:Src/main.c    ****              SERIAL_WRITE("PID 704 Output: %li\n",State.PID_704_Output);
 611              		.loc 1 164 0
 612 0242 6422     		movs	r2, #100
 613 0244 0021     		movs	r1, #0
 614 0246 2000     		movs	r0, r4
 615 0248 FFF7FEFF 		bl	memset
 616              	.LVL80:
 617 024c 2B00     		movs	r3, r5
 618 024e 1933     		adds	r3, r3, #25
 619 0250 FF33     		adds	r3, r3, #255
 620 0252 1A68     		ldr	r2, [r3]
 621 0254 5B68     		ldr	r3, [r3, #4]
 622 0256 B249     		ldr	r1, .L21+36
 623 0258 2000     		movs	r0, r4
 624 025a FFF7FEFF 		bl	sprintf
 625              	.LVL81:
 626 025e 82B2     		uxth	r2, r0
 627 0260 FA23     		movs	r3, #250
 628 0262 9B00     		lsls	r3, r3, #2
 629 0264 2100     		movs	r1, r4
ARM GAS  /tmp/ccgUGT8D.s 			page 18


 630 0266 A648     		ldr	r0, .L21+4
 631              	.LVL82:
 632 0268 FFF7FEFF 		bl	HAL_UART_Transmit
 633              	.LVL83:
 634              	.LBE12:
 635              	.LBB13:
 165:Src/main.c    ****         SERIAL_WRITE("PD1 Phase:\t\t");
 636              		.loc 1 165 0
 637 026c 6422     		movs	r2, #100
 638 026e 0021     		movs	r1, #0
 639 0270 2000     		movs	r0, r4
 640 0272 FFF7FEFF 		bl	memset
 641              	.LVL84:
 642 0276 2B00     		movs	r3, r5
 643 0278 7933     		adds	r3, r3, #121
 644 027a FF33     		adds	r3, r3, #255
 645 027c 1A68     		ldr	r2, [r3]
 646 027e 5B68     		ldr	r3, [r3, #4]
 647 0280 A849     		ldr	r1, .L21+40
 648 0282 2000     		movs	r0, r4
 649 0284 FFF7FEFF 		bl	sprintf
 650              	.LVL85:
 651 0288 82B2     		uxth	r2, r0
 652 028a FA23     		movs	r3, #250
 653 028c 9B00     		lsls	r3, r3, #2
 654 028e 2100     		movs	r1, r4
 655 0290 9B48     		ldr	r0, .L21+4
 656              	.LVL86:
 657 0292 FFF7FEFF 		bl	HAL_UART_Transmit
 658              	.LVL87:
 659              	.LBE13:
 660              	.LBB14:
 166:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD1_Phase_CH) / 1000);
 661              		.loc 1 166 0
 662 0296 5822     		movs	r2, #88
 663 0298 0021     		movs	r1, #0
 664 029a 04A8     		add	r0, sp, #16
 665 029c FFF7FEFF 		bl	memset
 666              	.LVL88:
 667 02a0 A14B     		ldr	r3, .L21+44
 668 02a2 2600     		movs	r6, r4
 669 02a4 07CB     		ldmia	r3!, {r0, r1, r2}
 670 02a6 07C6     		stmia	r6!, {r0, r1, r2}
 671 02a8 1B78     		ldrb	r3, [r3]
 672 02aa 3370     		strb	r3, [r6]
 673              	.LVL89:
 674 02ac FA23     		movs	r3, #250
 675 02ae 9B00     		lsls	r3, r3, #2
 676 02b0 0C22     		movs	r2, #12
 677 02b2 2100     		movs	r1, r4
 678 02b4 9248     		ldr	r0, .L21+4
 679 02b6 FFF7FEFF 		bl	HAL_UART_Transmit
 680              	.LVL90:
 681              	.LBE14:
 682              	.LBB15:
 167:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD1_Phase_CH) % 1000);
 683              		.loc 1 167 0
ARM GAS  /tmp/ccgUGT8D.s 			page 19


 684 02ba 6422     		movs	r2, #100
 685 02bc 0021     		movs	r1, #0
 686 02be 2000     		movs	r0, r4
 687 02c0 FFF7FEFF 		bl	memset
 688              	.LVL91:
 689 02c4 0620     		movs	r0, #6
 690 02c6 FFF7FEFF 		bl	Phase
 691              	.LVL92:
 692 02ca FA21     		movs	r1, #250
 693 02cc 8900     		lsls	r1, r1, #2
 694 02ce FFF7FEFF 		bl	__aeabi_idiv
 695              	.LVL93:
 696 02d2 0200     		movs	r2, r0
 697 02d4 9549     		ldr	r1, .L21+48
 698 02d6 2000     		movs	r0, r4
 699 02d8 FFF7FEFF 		bl	sprintf
 700              	.LVL94:
 701 02dc 82B2     		uxth	r2, r0
 702 02de FA23     		movs	r3, #250
 703 02e0 9B00     		lsls	r3, r3, #2
 704 02e2 2100     		movs	r1, r4
 705 02e4 8648     		ldr	r0, .L21+4
 706              	.LVL95:
 707 02e6 FFF7FEFF 		bl	HAL_UART_Transmit
 708              	.LVL96:
 709              	.LBE15:
 710              	.LBB16:
 168:Src/main.c    **** 
 711              		.loc 1 168 0
 712 02ea 6422     		movs	r2, #100
 713 02ec 0021     		movs	r1, #0
 714 02ee 2000     		movs	r0, r4
 715 02f0 FFF7FEFF 		bl	memset
 716              	.LVL97:
 717 02f4 0620     		movs	r0, #6
 718 02f6 FFF7FEFF 		bl	Phase
 719              	.LVL98:
 720 02fa FA21     		movs	r1, #250
 721 02fc 8900     		lsls	r1, r1, #2
 722 02fe FFF7FEFF 		bl	__aeabi_idivmod
 723              	.LVL99:
 724 0302 0A00     		movs	r2, r1
 725 0304 8A49     		ldr	r1, .L21+52
 726 0306 2000     		movs	r0, r4
 727 0308 FFF7FEFF 		bl	sprintf
 728              	.LVL100:
 729 030c 82B2     		uxth	r2, r0
 730 030e FA23     		movs	r3, #250
 731 0310 9B00     		lsls	r3, r3, #2
 732 0312 2100     		movs	r1, r4
 733 0314 7A48     		ldr	r0, .L21+4
 734              	.LVL101:
 735 0316 FFF7FEFF 		bl	HAL_UART_Transmit
 736              	.LVL102:
 737              	.LBE16:
 738              	.LBB17:
 170:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD2_Phase_CH) / 1000);
ARM GAS  /tmp/ccgUGT8D.s 			page 20


 739              		.loc 1 170 0
 740 031a 5822     		movs	r2, #88
 741 031c 0021     		movs	r1, #0
 742 031e 3000     		movs	r0, r6
 743 0320 FFF7FEFF 		bl	memset
 744              	.LVL103:
 745 0324 834B     		ldr	r3, .L21+56
 746 0326 2200     		movs	r2, r4
 747 0328 83CB     		ldmia	r3!, {r0, r1, r7}
 748 032a 83C2     		stmia	r2!, {r0, r1, r7}
 749 032c 1B78     		ldrb	r3, [r3]
 750 032e 3370     		strb	r3, [r6]
 751              	.LVL104:
 752 0330 FA23     		movs	r3, #250
 753 0332 9B00     		lsls	r3, r3, #2
 754 0334 0C22     		movs	r2, #12
 755 0336 2100     		movs	r1, r4
 756 0338 7148     		ldr	r0, .L21+4
 757 033a FFF7FEFF 		bl	HAL_UART_Transmit
 758              	.LVL105:
 759              	.LBE17:
 760              	.LBB18:
 171:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD2_Phase_CH) % 1000);
 761              		.loc 1 171 0
 762 033e 6422     		movs	r2, #100
 763 0340 0021     		movs	r1, #0
 764 0342 2000     		movs	r0, r4
 765 0344 FFF7FEFF 		bl	memset
 766              	.LVL106:
 767 0348 0020     		movs	r0, #0
 768 034a FFF7FEFF 		bl	Phase
 769              	.LVL107:
 770 034e FA21     		movs	r1, #250
 771 0350 8900     		lsls	r1, r1, #2
 772 0352 FFF7FEFF 		bl	__aeabi_idiv
 773              	.LVL108:
 774 0356 0200     		movs	r2, r0
 775 0358 7449     		ldr	r1, .L21+48
 776 035a 2000     		movs	r0, r4
 777 035c FFF7FEFF 		bl	sprintf
 778              	.LVL109:
 779 0360 82B2     		uxth	r2, r0
 780 0362 FA23     		movs	r3, #250
 781 0364 9B00     		lsls	r3, r3, #2
 782 0366 2100     		movs	r1, r4
 783 0368 6548     		ldr	r0, .L21+4
 784              	.LVL110:
 785 036a FFF7FEFF 		bl	HAL_UART_Transmit
 786              	.LVL111:
 787              	.LBE18:
 788              	.LBB19:
 172:Src/main.c    **** 
 789              		.loc 1 172 0
 790 036e 6422     		movs	r2, #100
 791 0370 0021     		movs	r1, #0
 792 0372 2000     		movs	r0, r4
 793 0374 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccgUGT8D.s 			page 21


 794              	.LVL112:
 795 0378 0020     		movs	r0, #0
 796 037a FFF7FEFF 		bl	Phase
 797              	.LVL113:
 798 037e FA21     		movs	r1, #250
 799 0380 8900     		lsls	r1, r1, #2
 800 0382 FFF7FEFF 		bl	__aeabi_idivmod
 801              	.LVL114:
 802 0386 0A00     		movs	r2, r1
 803 0388 6949     		ldr	r1, .L21+52
 804 038a 2000     		movs	r0, r4
 805 038c FFF7FEFF 		bl	sprintf
 806              	.LVL115:
 807 0390 82B2     		uxth	r2, r0
 808 0392 FA23     		movs	r3, #250
 809 0394 9B00     		lsls	r3, r3, #2
 810 0396 2100     		movs	r1, r4
 811 0398 5948     		ldr	r0, .L21+4
 812              	.LVL116:
 813 039a FFF7FEFF 		bl	HAL_UART_Transmit
 814              	.LVL117:
 815              	.LBE19:
 816              	.LBB20:
 174:Src/main.c    ****         SERIAL_WRITE("PID 352 Output: %li\n",State.PID_352_Output);
 817              		.loc 1 174 0
 818 039e 6422     		movs	r2, #100
 819 03a0 0021     		movs	r1, #0
 820 03a2 2000     		movs	r0, r4
 821 03a4 FFF7FEFF 		bl	memset
 822              	.LVL118:
 823 03a8 2B00     		movs	r3, r5
 824 03aa 3133     		adds	r3, r3, #49
 825 03ac FF33     		adds	r3, r3, #255
 826 03ae 1A68     		ldr	r2, [r3]
 827 03b0 5B68     		ldr	r3, [r3, #4]
 828 03b2 6149     		ldr	r1, .L21+60
 829 03b4 2000     		movs	r0, r4
 830 03b6 FFF7FEFF 		bl	sprintf
 831              	.LVL119:
 832 03ba 82B2     		uxth	r2, r0
 833 03bc FA23     		movs	r3, #250
 834 03be 9B00     		lsls	r3, r3, #2
 835 03c0 2100     		movs	r1, r4
 836 03c2 4F48     		ldr	r0, .L21+4
 837              	.LVL120:
 838 03c4 FFF7FEFF 		bl	HAL_UART_Transmit
 839              	.LVL121:
 840              	.LBE20:
 841              	.LBB21:
 175:Src/main.c    ****    
 842              		.loc 1 175 0
 843 03c8 6422     		movs	r2, #100
 844 03ca 0021     		movs	r1, #0
 845 03cc 2000     		movs	r0, r4
 846 03ce FFF7FEFF 		bl	memset
 847              	.LVL122:
 848 03d2 2B00     		movs	r3, r5
ARM GAS  /tmp/ccgUGT8D.s 			page 22


 849 03d4 4933     		adds	r3, r3, #73
 850 03d6 FF33     		adds	r3, r3, #255
 851 03d8 1A68     		ldr	r2, [r3]
 852 03da 5B68     		ldr	r3, [r3, #4]
 853 03dc 5749     		ldr	r1, .L21+64
 854 03de 2000     		movs	r0, r4
 855 03e0 FFF7FEFF 		bl	sprintf
 856              	.LVL123:
 857 03e4 82B2     		uxth	r2, r0
 858 03e6 FA23     		movs	r3, #250
 859 03e8 9B00     		lsls	r3, r3, #2
 860 03ea 2100     		movs	r1, r4
 861 03ec 4448     		ldr	r0, .L21+4
 862              	.LVL124:
 863 03ee FFF7FEFF 		bl	HAL_UART_Transmit
 864              	.LVL125:
 865              	.LBE21:
 866              	.LBB22:
 177:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD3_Phase_CH) / 1000);
 867              		.loc 1 177 0
 868 03f2 5822     		movs	r2, #88
 869 03f4 0021     		movs	r1, #0
 870 03f6 3000     		movs	r0, r6
 871 03f8 FFF7FEFF 		bl	memset
 872              	.LVL126:
 873 03fc 504B     		ldr	r3, .L21+68
 874 03fe 2200     		movs	r2, r4
 875 0400 23CB     		ldmia	r3!, {r0, r1, r5}
 876 0402 23C2     		stmia	r2!, {r0, r1, r5}
 877 0404 1B78     		ldrb	r3, [r3]
 878 0406 3370     		strb	r3, [r6]
 879              	.LVL127:
 880 0408 FA23     		movs	r3, #250
 881 040a 9B00     		lsls	r3, r3, #2
 882 040c 0C22     		movs	r2, #12
 883 040e 2100     		movs	r1, r4
 884 0410 3B48     		ldr	r0, .L21+4
 885 0412 FFF7FEFF 		bl	HAL_UART_Transmit
 886              	.LVL128:
 887              	.LBE22:
 888              	.LBB23:
 178:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD3_Phase_CH) % 1000);
 889              		.loc 1 178 0
 890 0416 6422     		movs	r2, #100
 891 0418 0021     		movs	r1, #0
 892 041a 2000     		movs	r0, r4
 893 041c FFF7FEFF 		bl	memset
 894              	.LVL129:
 895 0420 0E20     		movs	r0, #14
 896 0422 FFF7FEFF 		bl	Phase
 897              	.LVL130:
 898 0426 FA21     		movs	r1, #250
 899 0428 8900     		lsls	r1, r1, #2
 900 042a FFF7FEFF 		bl	__aeabi_idiv
 901              	.LVL131:
 902 042e 0200     		movs	r2, r0
 903 0430 3E49     		ldr	r1, .L21+48
ARM GAS  /tmp/ccgUGT8D.s 			page 23


 904 0432 2000     		movs	r0, r4
 905 0434 FFF7FEFF 		bl	sprintf
 906              	.LVL132:
 907 0438 82B2     		uxth	r2, r0
 908 043a FA23     		movs	r3, #250
 909 043c 9B00     		lsls	r3, r3, #2
 910 043e 2100     		movs	r1, r4
 911 0440 2F48     		ldr	r0, .L21+4
 912              	.LVL133:
 913 0442 FFF7FEFF 		bl	HAL_UART_Transmit
 914              	.LVL134:
 915              	.LBE23:
 916              	.LBB24:
 179:Src/main.c    **** 
 917              		.loc 1 179 0
 918 0446 6422     		movs	r2, #100
 919 0448 0021     		movs	r1, #0
 920 044a 2000     		movs	r0, r4
 921 044c FFF7FEFF 		bl	memset
 922              	.LVL135:
 923 0450 0E20     		movs	r0, #14
 924 0452 FFF7FEFF 		bl	Phase
 925              	.LVL136:
 926 0456 FA21     		movs	r1, #250
 927 0458 8900     		lsls	r1, r1, #2
 928 045a FFF7FEFF 		bl	__aeabi_idivmod
 929              	.LVL137:
 930 045e 0A00     		movs	r2, r1
 931 0460 3349     		ldr	r1, .L21+52
 932 0462 2000     		movs	r0, r4
 933 0464 FFF7FEFF 		bl	sprintf
 934              	.LVL138:
 935 0468 82B2     		uxth	r2, r0
 936 046a FA23     		movs	r3, #250
 937 046c 9B00     		lsls	r3, r3, #2
 938 046e 2100     		movs	r1, r4
 939 0470 2348     		ldr	r0, .L21+4
 940              	.LVL139:
 941 0472 FFF7FEFF 		bl	HAL_UART_Transmit
 942              	.LVL140:
 943              	.LBE24:
 944              	.LBB25:
 181:Src/main.c    ****         SERIAL_WRITE("%3i.", Phase(ADC_PD4_Phase_CH) / 1000);
 945              		.loc 1 181 0
 946 0476 5822     		movs	r2, #88
 947 0478 0021     		movs	r1, #0
 948 047a 3000     		movs	r0, r6
 949 047c FFF7FEFF 		bl	memset
 950              	.LVL141:
 951 0480 304B     		ldr	r3, .L21+72
 952 0482 2200     		movs	r2, r4
 953 0484 23CB     		ldmia	r3!, {r0, r1, r5}
 954 0486 23C2     		stmia	r2!, {r0, r1, r5}
 955 0488 1B78     		ldrb	r3, [r3]
 956 048a 3370     		strb	r3, [r6]
 957              	.LVL142:
 958 048c FA23     		movs	r3, #250
ARM GAS  /tmp/ccgUGT8D.s 			page 24


 959 048e 9B00     		lsls	r3, r3, #2
 960 0490 0C22     		movs	r2, #12
 961 0492 2100     		movs	r1, r4
 962 0494 1A48     		ldr	r0, .L21+4
 963 0496 FFF7FEFF 		bl	HAL_UART_Transmit
 964              	.LVL143:
 965              	.LBE25:
 966              	.LBB26:
 182:Src/main.c    ****         SERIAL_WRITE("%03li deg\t\t\n", Phase(ADC_PD4_Phase_CH) % 1000);
 967              		.loc 1 182 0
 968 049a 6422     		movs	r2, #100
 969 049c 0021     		movs	r1, #0
 970 049e 2000     		movs	r0, r4
 971 04a0 FFF7FEFF 		bl	memset
 972              	.LVL144:
 973 04a4 0220     		movs	r0, #2
 974 04a6 FFF7FEFF 		bl	Phase
 975              	.LVL145:
 976 04aa FA21     		movs	r1, #250
 977 04ac 8900     		lsls	r1, r1, #2
 978 04ae FFF7FEFF 		bl	__aeabi_idiv
 979              	.LVL146:
 980 04b2 0200     		movs	r2, r0
 981 04b4 1D49     		ldr	r1, .L21+48
 982 04b6 2000     		movs	r0, r4
 983 04b8 FFF7FEFF 		bl	sprintf
 984              	.LVL147:
 985 04bc 82B2     		uxth	r2, r0
 986 04be FA23     		movs	r3, #250
 987 04c0 9B00     		lsls	r3, r3, #2
 988 04c2 2100     		movs	r1, r4
 989 04c4 0E48     		ldr	r0, .L21+4
 990              	.LVL148:
 991 04c6 FFF7FEFF 		bl	HAL_UART_Transmit
 992              	.LVL149:
 993              	.LBE26:
 994              	.LBB27:
 183:Src/main.c    ****       }
 995              		.loc 1 183 0
 996 04ca 6422     		movs	r2, #100
 997 04cc 0021     		movs	r1, #0
 998 04ce 2000     		movs	r0, r4
 999 04d0 FFF7FEFF 		bl	memset
 1000              	.LVL150:
 1001 04d4 0220     		movs	r0, #2
 1002 04d6 FFF7FEFF 		bl	Phase
 1003              	.LVL151:
 1004 04da FA21     		movs	r1, #250
 1005 04dc 8900     		lsls	r1, r1, #2
 1006 04de FFF7FEFF 		bl	__aeabi_idivmod
 1007              	.LVL152:
 1008 04e2 0A00     		movs	r2, r1
 1009 04e4 1249     		ldr	r1, .L21+52
 1010 04e6 2000     		movs	r0, r4
 1011 04e8 FFF7FEFF 		bl	sprintf
 1012              	.LVL153:
 1013 04ec 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccgUGT8D.s 			page 25


 1014 04ee FA23     		movs	r3, #250
 1015 04f0 9B00     		lsls	r3, r3, #2
 1016 04f2 2100     		movs	r1, r4
 1017 04f4 0248     		ldr	r0, .L21+4
 1018              	.LVL154:
 1019 04f6 FFF7FEFF 		bl	HAL_UART_Transmit
 1020              	.LVL155:
 1021 04fa F3E5     		b	.L16
 1022              	.L22:
 1023              		.align	2
 1024              	.L21:
 1025 04fc 1C000000 		.word	.LC8
 1026 0500 00000000 		.word	huart2
 1027 0504 00000000 		.word	State
 1028 0508 20000000 		.word	.LC10
 1029 050c 28000000 		.word	.LC12
 1030 0510 30000000 		.word	.LC14
 1031 0514 38000000 		.word	.LC16
 1032 0518 40000000 		.word	.LC18
 1033 051c 54000000 		.word	.LC20
 1034 0520 68000000 		.word	.LC22
 1035 0524 80000000 		.word	.LC24
 1036 0528 98000000 		.word	.LC26
 1037 052c A8000000 		.word	.LC28
 1038 0530 B0000000 		.word	.LC30
 1039 0534 C0000000 		.word	.LC32
 1040 0538 D0000000 		.word	.LC34
 1041 053c E8000000 		.word	.LC36
 1042 0540 00010000 		.word	.LC38
 1043 0544 10010000 		.word	.LC40
 1044              	.LBE27:
 1045              	.LBE4:
 1046              		.cfi_endproc
 1047              	.LFE284:
 1049              		.global	State
 1050              		.section	.bss.State,"aw",%nobits
 1051              		.align	3
 1054              	State:
 1055 0000 00000000 		.space	424
 1055      00000000 
 1055      00000000 
 1055      00000000 
 1055      00000000 
 1056              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1057              		.align	2
 1058              	.LC3:
 1059 0000 0D3C3C3C 		.ascii	"\015<<<<<<<<<<RESET>>>>>>>>\012\000"
 1059      3C3C3C3C 
 1059      3C3C3C52 
 1059      45534554 
 1059      3E3E3E3E 
 1060 001a 0000     		.space	2
 1061              	.LC8:
 1062 001c 0A0A00   		.ascii	"\012\012\000"
 1063 001f 00       		.space	1
 1064              	.LC10:
 1065 0020 50443120 		.ascii	"PD1 %i\012\000"
ARM GAS  /tmp/ccgUGT8D.s 			page 26


 1065      25690A00 
 1066              	.LC12:
 1067 0028 50443220 		.ascii	"PD2 %i\012\000"
 1067      25690A00 
 1068              	.LC14:
 1069 0030 50443320 		.ascii	"PD3 %i\012\000"
 1069      25690A00 
 1070              	.LC16:
 1071 0038 50443420 		.ascii	"PD4 %i\012\000"
 1071      25690A00 
 1072              	.LC18:
 1073 0040 5049445F 		.ascii	"PID_352_P_error %i\012\000"
 1073      3335325F 
 1073      505F6572 
 1073      726F7220 
 1073      25690A00 
 1074              	.LC20:
 1075 0054 5049445F 		.ascii	"PID_704_P_error %i\012\000"
 1075      3730345F 
 1075      505F6572 
 1075      726F7220 
 1075      25690A00 
 1076              	.LC22:
 1077 0068 5044312B 		.ascii	"PD1+PD2 SETPOINT: %li\012\000"
 1077      50443220 
 1077      53455450 
 1077      4F494E54 
 1077      3A20256C 
 1078 007f 00       		.space	1
 1079              	.LC24:
 1080 0080 50494420 		.ascii	"PID 704 Output: %li\012\000"
 1080      37303420 
 1080      4F757470 
 1080      75743A20 
 1080      256C690A 
 1081 0095 000000   		.space	3
 1082              	.LC26:
 1083 0098 50443120 		.ascii	"PD1 Phase:\011\011\000"
 1083      50686173 
 1083      653A0909 
 1083      00
 1084 00a5 000000   		.space	3
 1085              	.LC28:
 1086 00a8 2533692E 		.ascii	"%3i.\000"
 1086      00
 1087 00ad 000000   		.space	3
 1088              	.LC30:
 1089 00b0 2530336C 		.ascii	"%03li deg\011\011\012\000"
 1089      69206465 
 1089      6709090A 
 1089      00
 1090 00bd 000000   		.space	3
 1091              	.LC32:
 1092 00c0 50443220 		.ascii	"PD2 Phase:\011\011\000"
 1092      50686173 
 1092      653A0909 
 1092      00
ARM GAS  /tmp/ccgUGT8D.s 			page 27


 1093 00cd 000000   		.space	3
 1094              	.LC34:
 1095 00d0 5044332B 		.ascii	"PD3+PD4 SETPOINT: %li\012\000"
 1095      50443420 
 1095      53455450 
 1095      4F494E54 
 1095      3A20256C 
 1096 00e7 00       		.space	1
 1097              	.LC36:
 1098 00e8 50494420 		.ascii	"PID 352 Output: %li\012\000"
 1098      33353220 
 1098      4F757470 
 1098      75743A20 
 1098      256C690A 
 1099 00fd 000000   		.space	3
 1100              	.LC38:
 1101 0100 50443320 		.ascii	"PD3 Phase:\011\011\000"
 1101      50686173 
 1101      653A0909 
 1101      00
 1102 010d 000000   		.space	3
 1103              	.LC40:
 1104 0110 50443420 		.ascii	"PD4 Phase:\011\011\000"
 1104      50686173 
 1104      653A0909 
 1104      00
 1105              		.text
 1106              	.Letext0:
 1107              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1108              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1109              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 1110              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 1111              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 1112              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc.h"
 1113              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc_ex.h"
 1114              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 1115              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 1116              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_lptim.h"
 1117              		.file 12 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_spi.h"
 1118              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 1119              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 1120              		.file 15 "/usr/include/newlib/sys/lock.h"
 1121              		.file 16 "/usr/include/newlib/sys/_types.h"
 1122              		.file 17 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1123              		.file 18 "/usr/include/newlib/sys/reent.h"
 1124              		.file 19 "Inc/usart.h"
 1125              		.file 20 "Inc/lptim.h"
 1126              		.file 21 "Inc/spi.h"
 1127              		.file 22 "Inc/state.h"
 1128              		.file 23 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_gpio.h"
 1129              		.file 24 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_pwr_ex.h"
 1130              		.file 25 "/usr/include/newlib/stdio.h"
 1131              		.file 26 "Inc/Filter.h"
 1132              		.file 27 "Inc/gpio.h"
 1133              		.file 28 "Inc/dma.h"
 1134              		.file 29 "Inc/ADC.h"
 1135              		.file 30 "Inc/DAC.h"
ARM GAS  /tmp/ccgUGT8D.s 			page 28


 1136              		.file 31 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_cortex.h"
 1137              		.file 32 "Inc/cmd.h"
 1138              		.file 33 "<built-in>"
ARM GAS  /tmp/ccgUGT8D.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccgUGT8D.s:16     .text.Error_Handler:00000000 $t
     /tmp/ccgUGT8D.s:23     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccgUGT8D.s:75     .text.SystemClock_Config:00000000 $t
     /tmp/ccgUGT8D.s:82     .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccgUGT8D.s:221    .text.SystemClock_Config:000000b0 $d
     /tmp/ccgUGT8D.s:229    .text.main:00000000 $t
     /tmp/ccgUGT8D.s:236    .text.main:00000000 main
     /tmp/ccgUGT8D.s:416    .text.main:000000f4 $d
     /tmp/ccgUGT8D.s:1054   .bss.State:00000000 State
     /tmp/ccgUGT8D.s:427    .text.main:00000114 $t
     /tmp/ccgUGT8D.s:1025   .text.main:000004fc $d
     /tmp/ccgUGT8D.s:1051   .bss.State:00000000 $d
     /tmp/ccgUGT8D.s:1057   .rodata.main.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_Delay
HAL_GPIO_WritePin
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_uidivmod
__aeabi_idiv
__aeabi_idivmod
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_LPTIM1_Init
MX_USART2_UART_Init
MX_SPI2_Init
MX_SPI1_Init
HAL_LPTIM_MspInit
HAL_LPTIM_Counter_Start_IT
HAL_SPI_MspInit
HAL_UART_Transmit
ADC_reset
ADC_config
HAL_UART_Receive_DMA
DAC_reset
HAL_InitTick
HAL_NVIC_SetPriority
DAC_cmd
ADC_update
PID_Init
Calib
cmd
hlptim1
hspi2
hspi1
huart2
Filter
PID
sprintf
ARM GAS  /tmp/ccgUGT8D.s 			page 30


Phase
