ARM GAS  /tmp/ccLO60rw.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	Error_Handler
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Error_Handler:
  24              	.LFB286:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    **** 	******************************************************************************
   4:Src/main.c    **** 	* @file           : main.c
   5:Src/main.c    **** 	* @brief          : Main program body
   6:Src/main.c    **** 	******************************************************************************
   7:Src/main.c    **** 	* @attention
   8:Src/main.c    **** 	*
   9:Src/main.c    **** 	* <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    **** 	* All rights reserved.</center></h2>
  11:Src/main.c    **** 	*
  12:Src/main.c    **** 	* This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    **** 	* the "License"; You may not use this file except in compliance with the
  14:Src/main.c    **** 	* License. You may obtain a copy of the License at:
  15:Src/main.c    **** 	*                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    **** 	*
  17:Src/main.c    **** 	******************************************************************************
  18:Src/main.c    **** 	*/
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "dma.h"
  24:Src/main.c    **** #include "lptim.h"
  25:Src/main.c    **** #include "spi.h"
  26:Src/main.c    **** #include "usart.h"
  27:Src/main.c    **** #include "gpio.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN Includes */
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "DAC.h"
  33:Src/main.c    **** #include "state.h"
ARM GAS  /tmp/ccLO60rw.s 			page 2


  34:Src/main.c    **** #include "usart_utils.h"
  35:Src/main.c    **** #include "cmd.h"
  36:Src/main.c    **** #include "Filter.h"
  37:Src/main.c    **** /* USER CODE END Includes */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PTD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PTD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PD */
  46:Src/main.c    **** /* USER CODE END PD */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  49:Src/main.c    **** /* USER CODE BEGIN PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END PM */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** state State = {0};
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** /* USER CODE BEGIN PFP */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END PFP */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END 0 */
  69:Src/main.c    **** 
  70:Src/main.c    **** /**
  71:Src/main.c    ****   * @brief  The application entry point.
  72:Src/main.c    ****   * @retval int
  73:Src/main.c    ****   */
  74:Src/main.c    **** int main(void)
  75:Src/main.c    **** {
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE END 1 */
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Src/main.c    ****   HAL_Init();
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE BEGIN Init */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE END Init */
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* Configure the system clock */
  90:Src/main.c    ****   SystemClock_Config();
ARM GAS  /tmp/ccLO60rw.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  93:Src/main.c    ****   /* USER CODE END SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Initialize all configured peripherals */
  96:Src/main.c    ****   MX_GPIO_Init();
  97:Src/main.c    ****   MX_DMA_Init();
  98:Src/main.c    ****   MX_LPTIM1_Init();
  99:Src/main.c    ****   MX_USART2_UART_Init();
 100:Src/main.c    ****   MX_SPI2_Init();
 101:Src/main.c    ****   MX_SPI1_Init();
 102:Src/main.c    ****   /* USER CODE BEGIN 2 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   HAL_LPTIM_MspInit(&hlptim1);
 105:Src/main.c    ****   HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_PRESCALER_1s_LSI);
 106:Src/main.c    ****   HAL_SPI_MspInit(&hspi2);
 107:Src/main.c    ****   HAL_SPI_MspInit(&hspi1);
 108:Src/main.c    **** 
 109:Src/main.c    ****   SERIAL_WRITE(RESET);
 110:Src/main.c    **** 
 111:Src/main.c    ****   ADC_reset();
 112:Src/main.c    ****   ADC_config();
 113:Src/main.c    ****   HAL_UART_Receive_DMA(&huart2, State.UART_RX_BUFF, UART_RX_BUFFER_LENGTH);
 114:Src/main.c    **** 
 115:Src/main.c    ****   DAC_reset();
 116:Src/main.c    **** 
 117:Src/main.c    ****   //PRIORITY OVERRIDES:
 118:Src/main.c    ****   HAL_InitTick(0);
 119:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 120:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 121:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 122:Src/main.c    ****   HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 123:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END 2 */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Infinite loop */
 128:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 129:Src/main.c    ****   DAC_cmd(RF_PS_704_OFFSET + DAC_WRITE + 0xfffa);
 130:Src/main.c    ****   ADC_update();
 131:Src/main.c    ****   while (1)
 132:Src/main.c    ****   {
 133:Src/main.c    ****     if (State.cmd)
 134:Src/main.c    ****     {
 135:Src/main.c    ****       cmd();
 136:Src/main.c    ****     };
 137:Src/main.c    ****     if (State.ADC_Updated)
 138:Src/main.c    ****     {
 139:Src/main.c    ****       Filter();
 140:Src/main.c    ****     };
 141:Src/main.c    ****     /* USER CODE END WHILE */
 142:Src/main.c    **** 
 143:Src/main.c    ****     /* USER CODE BEGIN 3 */
 144:Src/main.c    ****   }
 145:Src/main.c    ****   /* USER CODE END 3 */
 146:Src/main.c    **** }
 147:Src/main.c    **** 
ARM GAS  /tmp/ccLO60rw.s 			page 4


 148:Src/main.c    **** /**
 149:Src/main.c    ****   * @brief System Clock Configuration
 150:Src/main.c    ****   * @retval None
 151:Src/main.c    ****   */
 152:Src/main.c    **** void SystemClock_Config(void)
 153:Src/main.c    **** {
 154:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 155:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 156:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 157:Src/main.c    **** 
 158:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 159:Src/main.c    ****   */
 160:Src/main.c    ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 161:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 162:Src/main.c    ****   */
 163:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 168:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 169:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 170:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 171:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 175:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 176:Src/main.c    ****   {
 177:Src/main.c    ****     Error_Handler();
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 180:Src/main.c    ****   */
 181:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 182:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 183:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 184:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 185:Src/main.c    **** 
 186:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 187:Src/main.c    ****   {
 188:Src/main.c    ****     Error_Handler();
 189:Src/main.c    ****   }
 190:Src/main.c    ****   /** Initializes the peripherals clocks 
 191:Src/main.c    ****   */
 192:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPTIM1;
 193:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 194:Src/main.c    ****   PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 195:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    **** }
 200:Src/main.c    **** 
 201:Src/main.c    **** /* USER CODE BEGIN 4 */
 202:Src/main.c    **** 
 203:Src/main.c    **** /* USER CODE END 4 */
 204:Src/main.c    **** 
ARM GAS  /tmp/ccLO60rw.s 			page 5


 205:Src/main.c    **** /**
 206:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 207:Src/main.c    ****   * @retval None
 208:Src/main.c    ****   */
 209:Src/main.c    **** void Error_Handler(void)
 210:Src/main.c    **** {
  26              		.loc 1 210 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35              	.LVL0:
  36              	.LBB2:
 211:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 212:Src/main.c    ****   for (int i = 0; i < 10; i++)
  37              		.loc 1 212 0
  38 0002 0024     		movs	r4, #0
  39 0004 08E0     		b	.L2
  40              	.LVL1:
  41              	.L3:
 213:Src/main.c    ****   {
 214:Src/main.c    ****     HAL_GPIO_TogglePin(LED_PHASE_GPIO_Port, LED_PHASE_Pin);
  42              		.loc 1 214 0 discriminator 3
  43 0006 A020     		movs	r0, #160
  44 0008 0121     		movs	r1, #1
  45 000a C005     		lsls	r0, r0, #23
  46 000c FFF7FEFF 		bl	HAL_GPIO_TogglePin
  47              	.LVL2:
 215:Src/main.c    ****     HAL_Delay(100);
  48              		.loc 1 215 0 discriminator 3
  49 0010 6420     		movs	r0, #100
  50 0012 FFF7FEFF 		bl	HAL_Delay
  51              	.LVL3:
 212:Src/main.c    ****   {
  52              		.loc 1 212 0 discriminator 3
  53 0016 0134     		adds	r4, r4, #1
  54              	.LVL4:
  55              	.L2:
 212:Src/main.c    ****   {
  56              		.loc 1 212 0 is_stmt 0 discriminator 1
  57 0018 092C     		cmp	r4, #9
  58 001a F4DD     		ble	.L3
  59              	.LBE2:
 216:Src/main.c    ****   }
 217:Src/main.c    ****   HAL_GPIO_WritePin(LED_PHASE_GPIO_Port, LED_PHASE_Pin, 0);
  60              		.loc 1 217 0 is_stmt 1
  61 001c A020     		movs	r0, #160
  62 001e 0022     		movs	r2, #0
  63 0020 0121     		movs	r1, #1
  64 0022 C005     		lsls	r0, r0, #23
  65 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
  66              	.LVL5:
 218:Src/main.c    **** 
ARM GAS  /tmp/ccLO60rw.s 			page 6


 219:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 222:Src/main.c    **** }
  67              		.loc 1 222 0
  68              		@ sp needed
  69              	.LVL6:
  70 0028 10BD     		pop	{r4, pc}
  71              		.cfi_endproc
  72              	.LFE286:
  74              		.section	.text.SystemClock_Config,"ax",%progbits
  75              		.align	1
  76              		.global	SystemClock_Config
  77              		.syntax unified
  78              		.code	16
  79              		.thumb_func
  80              		.fpu softvfp
  82              	SystemClock_Config:
  83              	.LFB285:
 153:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  84              		.loc 1 153 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 128
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88 0000 00B5     		push	{lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 4
  91              		.cfi_offset 14, -4
  92 0002 A1B0     		sub	sp, sp, #132
  93              	.LCFI2:
  94              		.cfi_def_cfa_offset 136
 154:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  95              		.loc 1 154 0
  96 0004 3822     		movs	r2, #56
  97 0006 0021     		movs	r1, #0
  98 0008 12A8     		add	r0, sp, #72
  99 000a FFF7FEFF 		bl	memset
 100              	.LVL7:
 155:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 101              		.loc 1 155 0
 102 000e 1022     		movs	r2, #16
 103 0010 0021     		movs	r1, #0
 104 0012 0EA8     		add	r0, sp, #56
 105 0014 FFF7FEFF 		bl	memset
 106              	.LVL8:
 156:Src/main.c    **** 
 107              		.loc 1 156 0
 108 0018 3422     		movs	r2, #52
 109 001a 0021     		movs	r1, #0
 110 001c 01A8     		add	r0, sp, #4
 111 001e FFF7FEFF 		bl	memset
 112              	.LVL9:
 160:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 113              		.loc 1 160 0
 114 0022 8020     		movs	r0, #128
 115 0024 8000     		lsls	r0, r0, #2
 116 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
ARM GAS  /tmp/ccLO60rw.s 			page 7


 117              	.LVL10:
 163:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 118              		.loc 1 163 0
 119 002a 0A23     		movs	r3, #10
 120 002c 1293     		str	r3, [sp, #72]
 164:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 121              		.loc 1 164 0
 122 002e F633     		adds	r3, r3, #246
 123 0030 1593     		str	r3, [sp, #84]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 124              		.loc 1 165 0
 125 0032 0023     		movs	r3, #0
 126 0034 1693     		str	r3, [sp, #88]
 166:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 127              		.loc 1 166 0
 128 0036 4022     		movs	r2, #64
 129 0038 1792     		str	r2, [sp, #92]
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 130              		.loc 1 167 0
 131 003a 3F3A     		subs	r2, r2, #63
 132 003c 1892     		str	r2, [sp, #96]
 168:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 133              		.loc 1 168 0
 134 003e 0132     		adds	r2, r2, #1
 135 0040 1992     		str	r2, [sp, #100]
 169:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 136              		.loc 1 169 0
 137 0042 1A92     		str	r2, [sp, #104]
 170:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 138              		.loc 1 170 0
 139 0044 1B93     		str	r3, [sp, #108]
 171:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 140              		.loc 1 171 0
 141 0046 0833     		adds	r3, r3, #8
 142 0048 1C93     		str	r3, [sp, #112]
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 143              		.loc 1 172 0
 144 004a 8023     		movs	r3, #128
 145 004c 9B02     		lsls	r3, r3, #10
 146 004e 1D93     		str	r3, [sp, #116]
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 147              		.loc 1 173 0
 148 0050 8023     		movs	r3, #128
 149 0052 9B04     		lsls	r3, r3, #18
 150 0054 1E93     		str	r3, [sp, #120]
 174:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 151              		.loc 1 174 0
 152 0056 8023     		movs	r3, #128
 153 0058 9B05     		lsls	r3, r3, #22
 154 005a 1F93     		str	r3, [sp, #124]
 175:Src/main.c    ****   {
 155              		.loc 1 175 0
 156 005c 12A8     		add	r0, sp, #72
 157 005e FFF7FEFF 		bl	HAL_RCC_OscConfig
 158              	.LVL11:
 159 0062 0028     		cmp	r0, #0
 160 0064 1AD1     		bne	.L8
ARM GAS  /tmp/ccLO60rw.s 			page 8


 161              	.L5:
 181:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 162              		.loc 1 181 0
 163 0066 0723     		movs	r3, #7
 164 0068 0E93     		str	r3, [sp, #56]
 182:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 165              		.loc 1 182 0
 166 006a 053B     		subs	r3, r3, #5
 167 006c 0F93     		str	r3, [sp, #60]
 183:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 168              		.loc 1 183 0
 169 006e 0023     		movs	r3, #0
 170 0070 1093     		str	r3, [sp, #64]
 184:Src/main.c    **** 
 171              		.loc 1 184 0
 172 0072 1193     		str	r3, [sp, #68]
 186:Src/main.c    ****   {
 173              		.loc 1 186 0
 174 0074 0221     		movs	r1, #2
 175 0076 0EA8     		add	r0, sp, #56
 176 0078 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 177              	.LVL12:
 178 007c 0028     		cmp	r0, #0
 179 007e 10D1     		bne	.L9
 180              	.L6:
 192:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 181              		.loc 1 192 0
 182 0080 0B4B     		ldr	r3, .L11
 183 0082 0193     		str	r3, [sp, #4]
 193:Src/main.c    ****   PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 184              		.loc 1 193 0
 185 0084 0023     		movs	r3, #0
 186 0086 0393     		str	r3, [sp, #12]
 194:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 187              		.loc 1 194 0
 188 0088 8023     		movs	r3, #128
 189 008a DB02     		lsls	r3, r3, #11
 190 008c 0793     		str	r3, [sp, #28]
 195:Src/main.c    ****   {
 191              		.loc 1 195 0
 192 008e 01A8     		add	r0, sp, #4
 193 0090 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 194              	.LVL13:
 195 0094 0028     		cmp	r0, #0
 196 0096 07D1     		bne	.L10
 197              	.L4:
 199:Src/main.c    **** 
 198              		.loc 1 199 0
 199 0098 21B0     		add	sp, sp, #132
 200              		@ sp needed
 201 009a 00BD     		pop	{pc}
 202              	.L8:
 177:Src/main.c    ****   }
 203              		.loc 1 177 0
 204 009c FFF7FEFF 		bl	Error_Handler
 205              	.LVL14:
 206 00a0 E1E7     		b	.L5
ARM GAS  /tmp/ccLO60rw.s 			page 9


 207              	.L9:
 188:Src/main.c    ****   }
 208              		.loc 1 188 0
 209 00a2 FFF7FEFF 		bl	Error_Handler
 210              	.LVL15:
 211 00a6 EBE7     		b	.L6
 212              	.L10:
 197:Src/main.c    ****   }
 213              		.loc 1 197 0
 214 00a8 FFF7FEFF 		bl	Error_Handler
 215              	.LVL16:
 199:Src/main.c    **** 
 216              		.loc 1 199 0
 217 00ac F4E7     		b	.L4
 218              	.L12:
 219 00ae C046     		.align	2
 220              	.L11:
 221 00b0 02020000 		.word	514
 222              		.cfi_endproc
 223              	.LFE285:
 225              		.section	.text.main,"ax",%progbits
 226              		.align	1
 227              		.global	main
 228              		.syntax unified
 229              		.code	16
 230              		.thumb_func
 231              		.fpu softvfp
 233              	main:
 234              	.LFB284:
  75:Src/main.c    ****   /* USER CODE BEGIN 1 */
 235              		.loc 1 75 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 104
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 30B5     		push	{r4, r5, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 12
 242              		.cfi_offset 4, -12
 243              		.cfi_offset 5, -8
 244              		.cfi_offset 14, -4
 245 0002 9BB0     		sub	sp, sp, #108
 246              	.LCFI4:
 247              		.cfi_def_cfa_offset 120
  83:Src/main.c    **** 
 248              		.loc 1 83 0
 249 0004 FFF7FEFF 		bl	HAL_Init
 250              	.LVL17:
  90:Src/main.c    **** 
 251              		.loc 1 90 0
 252 0008 FFF7FEFF 		bl	SystemClock_Config
 253              	.LVL18:
  96:Src/main.c    ****   MX_DMA_Init();
 254              		.loc 1 96 0
 255 000c FFF7FEFF 		bl	MX_GPIO_Init
 256              	.LVL19:
  97:Src/main.c    ****   MX_LPTIM1_Init();
 257              		.loc 1 97 0
ARM GAS  /tmp/ccLO60rw.s 			page 10


 258 0010 FFF7FEFF 		bl	MX_DMA_Init
 259              	.LVL20:
  98:Src/main.c    ****   MX_USART2_UART_Init();
 260              		.loc 1 98 0
 261 0014 FFF7FEFF 		bl	MX_LPTIM1_Init
 262              	.LVL21:
  99:Src/main.c    ****   MX_SPI2_Init();
 263              		.loc 1 99 0
 264 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 265              	.LVL22:
 100:Src/main.c    ****   MX_SPI1_Init();
 266              		.loc 1 100 0
 267 001c FFF7FEFF 		bl	MX_SPI2_Init
 268              	.LVL23:
 101:Src/main.c    ****   /* USER CODE BEGIN 2 */
 269              		.loc 1 101 0
 270 0020 FFF7FEFF 		bl	MX_SPI1_Init
 271              	.LVL24:
 104:Src/main.c    ****   HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_PRESCALER_1s_LSI);
 272              		.loc 1 104 0
 273 0024 304C     		ldr	r4, .L18
 274 0026 2000     		movs	r0, r4
 275 0028 FFF7FEFF 		bl	HAL_LPTIM_MspInit
 276              	.LVL25:
 105:Src/main.c    ****   HAL_SPI_MspInit(&hspi2);
 277              		.loc 1 105 0
 278 002c FA21     		movs	r1, #250
 279 002e 2000     		movs	r0, r4
 280 0030 FFF7FEFF 		bl	HAL_LPTIM_Counter_Start_IT
 281              	.LVL26:
 106:Src/main.c    ****   HAL_SPI_MspInit(&hspi1);
 282              		.loc 1 106 0
 283 0034 2D48     		ldr	r0, .L18+4
 284 0036 FFF7FEFF 		bl	HAL_SPI_MspInit
 285              	.LVL27:
 107:Src/main.c    **** 
 286              		.loc 1 107 0
 287 003a 2D48     		ldr	r0, .L18+8
 288 003c FFF7FEFF 		bl	HAL_SPI_MspInit
 289              	.LVL28:
 290              	.LBB3:
 109:Src/main.c    **** 
 291              		.loc 1 109 0
 292 0040 01AC     		add	r4, sp, #4
 293 0042 4A22     		movs	r2, #74
 294 0044 0021     		movs	r1, #0
 295 0046 1E20     		movs	r0, #30
 296 0048 6844     		add	r0, r0, sp
 297 004a FFF7FEFF 		bl	memset
 298              	.LVL29:
 299 004e 2949     		ldr	r1, .L18+12
 300 0050 2300     		movs	r3, r4
 301 0052 0A00     		movs	r2, r1
 302 0054 23CA     		ldmia	r2!, {r0, r1, r5}
 303 0056 23C3     		stmia	r3!, {r0, r1, r5}
 304 0058 23CA     		ldmia	r2!, {r0, r1, r5}
 305 005a 23C3     		stmia	r3!, {r0, r1, r5}
ARM GAS  /tmp/ccLO60rw.s 			page 11


 306 005c 1288     		ldrh	r2, [r2]
 307 005e 1A80     		strh	r2, [r3]
 308              	.LVL30:
 309 0060 FA23     		movs	r3, #250
 310 0062 254D     		ldr	r5, .L18+16
 311 0064 9B00     		lsls	r3, r3, #2
 312 0066 1922     		movs	r2, #25
 313 0068 2100     		movs	r1, r4
 314 006a 2800     		movs	r0, r5
 315 006c FFF7FEFF 		bl	HAL_UART_Transmit
 316              	.LVL31:
 317              	.LBE3:
 111:Src/main.c    ****   ADC_config();
 318              		.loc 1 111 0
 319 0070 FFF7FEFF 		bl	ADC_reset
 320              	.LVL32:
 112:Src/main.c    ****   HAL_UART_Receive_DMA(&huart2, State.UART_RX_BUFF, UART_RX_BUFFER_LENGTH);
 321              		.loc 1 112 0
 322 0074 FFF7FEFF 		bl	ADC_config
 323              	.LVL33:
 113:Src/main.c    **** 
 324              		.loc 1 113 0
 325 0078 4022     		movs	r2, #64
 326 007a 2049     		ldr	r1, .L18+20
 327 007c 2800     		movs	r0, r5
 328 007e FFF7FEFF 		bl	HAL_UART_Receive_DMA
 329              	.LVL34:
 115:Src/main.c    **** 
 330              		.loc 1 115 0
 331 0082 FFF7FEFF 		bl	DAC_reset
 332              	.LVL35:
 118:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 333              		.loc 1 118 0
 334 0086 0020     		movs	r0, #0
 335 0088 FFF7FEFF 		bl	HAL_InitTick
 336              	.LVL36:
 119:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 337              		.loc 1 119 0
 338 008c 0022     		movs	r2, #0
 339 008e 0121     		movs	r1, #1
 340 0090 0720     		movs	r0, #7
 341 0092 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 342              	.LVL37:
 120:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 343              		.loc 1 120 0
 344 0096 0022     		movs	r2, #0
 345 0098 0221     		movs	r1, #2
 346 009a 0920     		movs	r0, #9
 347 009c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 348              	.LVL38:
 121:Src/main.c    ****   HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 349              		.loc 1 121 0
 350 00a0 0022     		movs	r2, #0
 351 00a2 0221     		movs	r1, #2
 352 00a4 1120     		movs	r0, #17
 353 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 354              	.LVL39:
ARM GAS  /tmp/ccLO60rw.s 			page 12


 122:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 355              		.loc 1 122 0
 356 00aa 0022     		movs	r2, #0
 357 00ac 0221     		movs	r1, #2
 358 00ae 1A20     		movs	r0, #26
 359 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 360              	.LVL40:
 123:Src/main.c    **** 
 361              		.loc 1 123 0
 362 00b4 0022     		movs	r2, #0
 363 00b6 0221     		movs	r1, #2
 364 00b8 1C20     		movs	r0, #28
 365 00ba FFF7FEFF 		bl	HAL_NVIC_SetPriority
 366              	.LVL41:
 129:Src/main.c    ****   ADC_update();
 367              		.loc 1 129 0
 368 00be 1048     		ldr	r0, .L18+24
 369 00c0 FFF7FEFF 		bl	DAC_cmd
 370              	.LVL42:
 130:Src/main.c    ****   while (1)
 371              		.loc 1 130 0
 372 00c4 FFF7FEFF 		bl	ADC_update
 373              	.LVL43:
 374 00c8 03E0     		b	.L15
 375              	.L14:
 137:Src/main.c    ****     {
 376              		.loc 1 137 0
 377 00ca 0E4B     		ldr	r3, .L18+28
 378 00cc 5B7A     		ldrb	r3, [r3, #9]
 379 00ce 002B     		cmp	r3, #0
 380 00d0 07D1     		bne	.L17
 381              	.L15:
 133:Src/main.c    ****     {
 382              		.loc 1 133 0
 383 00d2 0C4A     		ldr	r2, .L18+28
 384 00d4 0C4B     		ldr	r3, .L18+32
 385 00d6 D35C     		ldrb	r3, [r2, r3]
 386 00d8 002B     		cmp	r3, #0
 387 00da F6D0     		beq	.L14
 135:Src/main.c    ****     };
 388              		.loc 1 135 0
 389 00dc FFF7FEFF 		bl	cmd
 390              	.LVL44:
 391 00e0 F3E7     		b	.L14
 392              	.L17:
 139:Src/main.c    ****     };
 393              		.loc 1 139 0
 394 00e2 FFF7FEFF 		bl	Filter
 395              	.LVL45:
 396 00e6 F4E7     		b	.L15
 397              	.L19:
 398              		.align	2
 399              	.L18:
 400 00e8 00000000 		.word	hlptim1
 401 00ec 00000000 		.word	hspi2
 402 00f0 00000000 		.word	hspi1
 403 00f4 00000000 		.word	.LC3
ARM GAS  /tmp/ccLO60rw.s 			page 13


 404 00f8 00000000 		.word	huart2
 405 00fc 90040000 		.word	State+1168
 406 0100 FAFF1600 		.word	1507322
 407 0104 00000000 		.word	State
 408 0108 8F040000 		.word	1167
 409              		.cfi_endproc
 410              	.LFE284:
 412              		.global	State
 413              		.section	.bss.State,"aw",%nobits
 414              		.align	2
 417              	State:
 418 0000 00000000 		.space	1232
 418      00000000 
 418      00000000 
 418      00000000 
 418      00000000 
 419              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 420              		.align	2
 421              	.LC3:
 422 0000 0D3C3C3C 		.ascii	"\015<<<<<<<<<<RESET>>>>>>>>\012\000"
 422      3C3C3C3C 
 422      3C3C3C52 
 422      45534554 
 422      3E3E3E3E 
 423              		.text
 424              	.Letext0:
 425              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 426              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 427              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 428              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 429              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 430              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc.h"
 431              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc_ex.h"
 432              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 433              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 434              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_lptim.h"
 435              		.file 12 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_spi.h"
 436              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 437              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 438              		.file 15 "/usr/include/newlib/sys/lock.h"
 439              		.file 16 "/usr/include/newlib/sys/_types.h"
 440              		.file 17 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 441              		.file 18 "/usr/include/newlib/sys/reent.h"
 442              		.file 19 "Inc/usart.h"
 443              		.file 20 "Inc/lptim.h"
 444              		.file 21 "Inc/spi.h"
 445              		.file 22 "Inc/state.h"
 446              		.file 23 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_gpio.h"
 447              		.file 24 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_pwr_ex.h"
 448              		.file 25 "Inc/gpio.h"
 449              		.file 26 "Inc/dma.h"
 450              		.file 27 "Inc/ADC.h"
 451              		.file 28 "Inc/DAC.h"
 452              		.file 29 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_cortex.h"
 453              		.file 30 "Inc/Filter.h"
 454              		.file 31 "<built-in>"
 455              		.file 32 "Inc/cmd.h"
ARM GAS  /tmp/ccLO60rw.s 			page 14


ARM GAS  /tmp/ccLO60rw.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccLO60rw.s:16     .text.Error_Handler:00000000 $t
     /tmp/ccLO60rw.s:23     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccLO60rw.s:75     .text.SystemClock_Config:00000000 $t
     /tmp/ccLO60rw.s:82     .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccLO60rw.s:221    .text.SystemClock_Config:000000b0 $d
     /tmp/ccLO60rw.s:226    .text.main:00000000 $t
     /tmp/ccLO60rw.s:233    .text.main:00000000 main
     /tmp/ccLO60rw.s:400    .text.main:000000e8 $d
     /tmp/ccLO60rw.s:417    .bss.State:00000000 State
     /tmp/ccLO60rw.s:414    .bss.State:00000000 $d
     /tmp/ccLO60rw.s:420    .rodata.main.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_Delay
HAL_GPIO_WritePin
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_LPTIM1_Init
MX_USART2_UART_Init
MX_SPI2_Init
MX_SPI1_Init
HAL_LPTIM_MspInit
HAL_LPTIM_Counter_Start_IT
HAL_SPI_MspInit
HAL_UART_Transmit
ADC_reset
ADC_config
HAL_UART_Receive_DMA
DAC_reset
HAL_InitTick
HAL_NVIC_SetPriority
DAC_cmd
ADC_update
cmd
Filter
hlptim1
hspi2
hspi1
huart2
